{"ast":null,"code":"var _jsxFileName = \"/Users/kseniia/Desktop/WillPsGn/src/components/MemoryGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoryGame = ({\n  words,\n  onAnswer\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  useEffect(() => {\n    // Create cards from words and their definitions\n    const newCards = [...words.map(word => ({\n      id: word.id,\n      content: word.word,\n      type: \"word\",\n      isFlipped: false,\n      isMatched: false\n    })), ...words.map(word => ({\n      id: word.id,\n      content: word.definition,\n      type: \"definition\",\n      isFlipped: false,\n      isMatched: false\n    }))];\n\n    // Shuffle the cards\n    setCards(newCards.sort(() => Math.random() - 0.5));\n  }, [words]);\n  const handleCardClick = index => {\n    if (flippedCards.length === 2 || cards[index].isMatched || flippedCards.includes(index)) {\n      return;\n    }\n    const newFlippedCards = [...flippedCards, index];\n    setFlippedCards(newFlippedCards);\n\n    // Update card flip state\n    setCards(prevCards => {\n      const newCards = [...prevCards];\n      newCards[index] = {\n        ...newCards[index],\n        isFlipped: true\n      };\n      return newCards;\n    });\n\n    // Check for match if two cards are flipped\n    if (newFlippedCards.length === 2) {\n      const [firstIndex, secondIndex] = newFlippedCards;\n      const firstCard = cards[firstIndex];\n      const secondCard = cards[secondIndex];\n      if (firstCard.id === secondCard.id) {\n        // Match found\n        onAnswer(true);\n\n        // Update matched state\n        setCards(prevCards => {\n          const newCards = [...prevCards];\n          newCards[firstIndex] = {\n            ...newCards[firstIndex],\n            isMatched: true\n          };\n          newCards[secondIndex] = {\n            ...newCards[secondIndex],\n            isMatched: true\n          };\n          return newCards;\n        });\n      } else {\n        // No match\n        onAnswer(false);\n        setTimeout(() => {\n          setCards(prevCards => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = {\n              ...newCards[firstIndex],\n              isFlipped: false\n            };\n            newCards[secondIndex] = {\n              ...newCards[secondIndex],\n              isFlipped: false\n            };\n            return newCards;\n          });\n        }, 1000);\n      }\n      setFlippedCards([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cards-grid\",\n    children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `card ${card.isFlipped ? \"flipped\" : \"\"} ${card.isMatched ? \"matched\" : \"\"}`,\n      onClick: () => handleCardClick(index),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-front\",\n          children: \"?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-back\",\n          children: card.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)\n    }, `${card.type}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"uOPXoMmHk7PpFfa2yUiZsTC1/EQ=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MemoryGame","words","onAnswer","_s","cards","setCards","flippedCards","setFlippedCards","newCards","map","word","id","content","type","isFlipped","isMatched","definition","sort","Math","random","handleCardClick","index","length","includes","newFlippedCards","prevCards","firstIndex","secondIndex","firstCard","secondCard","setTimeout","className","children","card","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/MemoryGame.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface MemoryGameProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n}\n\ninterface Card {\n  id: number;\n  content: string;\n  type: \"word\" | \"definition\";\n  isFlipped: boolean;\n  isMatched: boolean;\n}\n\nconst MemoryGame: React.FC<MemoryGameProps> = ({ words, onAnswer }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\n\n  useEffect(() => {\n    // Create cards from words and their definitions\n    const newCards: Card[] = [\n      ...words.map((word) => ({\n        id: word.id,\n        content: word.word,\n        type: \"word\" as const,\n        isFlipped: false,\n        isMatched: false,\n      })),\n      ...words.map((word) => ({\n        id: word.id,\n        content: word.definition,\n        type: \"definition\" as const,\n        isFlipped: false,\n        isMatched: false,\n      })),\n    ];\n\n    // Shuffle the cards\n    setCards(newCards.sort(() => Math.random() - 0.5));\n  }, [words]);\n\n  const handleCardClick = (index: number) => {\n    if (\n      flippedCards.length === 2 ||\n      cards[index].isMatched ||\n      flippedCards.includes(index)\n    ) {\n      return;\n    }\n\n    const newFlippedCards = [...flippedCards, index];\n    setFlippedCards(newFlippedCards);\n\n    // Update card flip state\n    setCards((prevCards) => {\n      const newCards = [...prevCards];\n      newCards[index] = { ...newCards[index], isFlipped: true };\n      return newCards;\n    });\n\n    // Check for match if two cards are flipped\n    if (newFlippedCards.length === 2) {\n      const [firstIndex, secondIndex] = newFlippedCards;\n      const firstCard = cards[firstIndex];\n      const secondCard = cards[secondIndex];\n\n      if (firstCard.id === secondCard.id) {\n        // Match found\n        onAnswer(true);\n        \n        // Update matched state\n        setCards((prevCards) => {\n          const newCards = [...prevCards];\n          newCards[firstIndex] = { ...newCards[firstIndex], isMatched: true };\n          newCards[secondIndex] = { ...newCards[secondIndex], isMatched: true };\n          return newCards;\n        });\n      } else {\n        // No match\n        onAnswer(false);\n        setTimeout(() => {\n          setCards((prevCards) => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = {\n              ...newCards[firstIndex],\n              isFlipped: false,\n            };\n            newCards[secondIndex] = {\n              ...newCards[secondIndex],\n              isFlipped: false,\n            };\n            return newCards;\n          });\n        }, 1000);\n      }\n      setFlippedCards([]);\n    }\n  };\n\n  return (\n    <div className=\"cards-grid\">\n      {cards.map((card, index) => (\n        <div\n          key={`${card.type}-${index}`}\n          className={`card ${card.isFlipped ? \"flipped\" : \"\"} ${\n            card.isMatched ? \"matched\" : \"\"\n          }`}\n          onClick={() => handleCardClick(index)}\n        >\n          <div className=\"card-inner\">\n            <div className=\"card-front\">?</div>\n            <div className=\"card-back\">{card.content}</div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}