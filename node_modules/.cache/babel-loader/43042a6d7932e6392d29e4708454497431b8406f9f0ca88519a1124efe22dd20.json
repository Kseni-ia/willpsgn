{"ast":null,"code":"var _jsxFileName = \"/Users/kseniia/Desktop/WillPsGn/src/components/DefinitionMatch.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DefinitionMatch = ({\n  words,\n  onAnswer\n}) => {\n  _s();\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [selectedDefinition, setSelectedDefinition] = useState(null);\n  const [matchedPairs, setMatchedPairs] = useState(new Set());\n  const [shuffledDefinitions, setShuffledDefinitions] = useState([]);\n  const [animatingMatch, setAnimatingMatch] = useState(null);\n  const [incorrectMatch, setIncorrectMatch] = useState(null);\n  useEffect(() => {\n    // Shuffle definitions when component mounts or words change\n    const definitions = words.map(word => word.definition);\n    setShuffledDefinitions([...definitions].sort(() => Math.random() - 0.5));\n  }, [words]);\n  const makeAttempt = (word, definition) => {\n    const isCorrect = word.definition === definition;\n    if (isCorrect) {\n      // Start connection animation\n      setAnimatingMatch({\n        wordId: word.id,\n        definition\n      });\n\n      // After animation, add to matched pairs\n      setTimeout(() => {\n        setMatchedPairs(prev => {\n          const newSet = new Set(prev);\n          newSet.add(word.id);\n          return newSet;\n        });\n        setAnimatingMatch(null);\n      }, 1200); // Animation duration\n    } else {\n      // Show incorrect match animation\n      setIncorrectMatch({\n        wordId: word.id,\n        definition\n      });\n\n      // After showing red feedback, clear it\n      setTimeout(() => {\n        setIncorrectMatch(null);\n      }, 800); // Shorter duration for incorrect feedback\n    }\n\n    // Only call onAnswer when we have a complete attempt (word + definition)\n    onAnswer(isCorrect);\n    setSelectedWord(null);\n    setSelectedDefinition(null);\n  };\n  const handleWordClick = word => {\n    if (matchedPairs.has(word.id) || animatingMatch || incorrectMatch) return;\n    if (selectedDefinition) {\n      // We have a definition selected, make the attempt\n      makeAttempt(word, selectedDefinition);\n    } else {\n      // Just select the word\n      setSelectedWord(word);\n      setSelectedDefinition(null);\n    }\n  };\n  const handleDefinitionClick = definition => {\n    if (animatingMatch || incorrectMatch) return; // Prevent clicks during animation\n\n    if (selectedWord) {\n      // We have a word selected, make the attempt\n      makeAttempt(selectedWord, definition);\n    } else {\n      // Just select the definition\n      setSelectedDefinition(definition);\n      setSelectedWord(null);\n    }\n  };\n\n  // Filter out matched words and definitions\n  const availableWords = words.filter(word => !matchedPairs.has(word.id));\n  const availableDefinitions = shuffledDefinitions.filter(definition => {\n    // Find the word that has this definition\n    const wordWithDefinition = words.find(word => word.definition === definition);\n    return wordWithDefinition && !matchedPairs.has(wordWithDefinition.id);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"match-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-list\",\n      children: [availableWords.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `word-item ${(selectedWord === null || selectedWord === void 0 ? void 0 : selectedWord.id) === word.id ? \"selected\" : \"\"} ${(animatingMatch === null || animatingMatch === void 0 ? void 0 : animatingMatch.wordId) === word.id ? \"connecting\" : \"\"} ${(incorrectMatch === null || incorrectMatch === void 0 ? void 0 : incorrectMatch.wordId) === word.id ? \"incorrect-flash\" : \"\"}`,\n        onClick: () => handleWordClick(word),\n        children: word.word\n      }, word.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)), availableWords.length === 0 && !animatingMatch && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"completion-message\",\n        children: \"\\uD83C\\uDF89 All words matched! Great job!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"definition-list\",\n      children: [availableDefinitions.map((definition, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `definition-item ${selectedDefinition === definition ? \"selected\" : \"\"} ${(animatingMatch === null || animatingMatch === void 0 ? void 0 : animatingMatch.definition) === definition ? \"connecting\" : \"\"} ${(incorrectMatch === null || incorrectMatch === void 0 ? void 0 : incorrectMatch.definition) === definition ? \"incorrect-flash\" : \"\"}`,\n        onClick: () => handleDefinitionClick(definition),\n        children: definition\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)), availableDefinitions.length === 0 && !animatingMatch && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"completion-message\",\n        children: \"\\uD83C\\uDF89 All definitions matched! Excellent work!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(DefinitionMatch, \"yqC4O41jAB2+utZaczQRDwJOV4o=\");\n_c = DefinitionMatch;\nexport default DefinitionMatch;\nvar _c;\n$RefreshReg$(_c, \"DefinitionMatch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DefinitionMatch","words","onAnswer","_s","selectedWord","setSelectedWord","selectedDefinition","setSelectedDefinition","matchedPairs","setMatchedPairs","Set","shuffledDefinitions","setShuffledDefinitions","animatingMatch","setAnimatingMatch","incorrectMatch","setIncorrectMatch","definitions","map","word","definition","sort","Math","random","makeAttempt","isCorrect","wordId","id","setTimeout","prev","newSet","add","handleWordClick","has","handleDefinitionClick","availableWords","filter","availableDefinitions","wordWithDefinition","find","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","index","_c","$RefreshReg$"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/DefinitionMatch.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface DefinitionMatchProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n}\n\nconst DefinitionMatch: React.FC<DefinitionMatchProps> = ({\n  words,\n  onAnswer,\n}) => {\n  const [selectedWord, setSelectedWord] = useState<Word | null>(null);\n  const [selectedDefinition, setSelectedDefinition] = useState<string | null>(\n    null\n  );\n  const [matchedPairs, setMatchedPairs] = useState<Set<number>>(new Set());\n  const [shuffledDefinitions, setShuffledDefinitions] = useState<string[]>([]);\n  const [animatingMatch, setAnimatingMatch] = useState<{\n    wordId: number;\n    definition: string;\n  } | null>(null);\n  const [incorrectMatch, setIncorrectMatch] = useState<{\n    wordId: number;\n    definition: string;\n  } | null>(null);\n\n  useEffect(() => {\n    // Shuffle definitions when component mounts or words change\n    const definitions = words.map((word) => word.definition);\n    setShuffledDefinitions([...definitions].sort(() => Math.random() - 0.5));\n  }, [words]);\n\n  const makeAttempt = (word: Word, definition: string) => {\n    const isCorrect = word.definition === definition;\n\n    if (isCorrect) {\n      // Start connection animation\n      setAnimatingMatch({ wordId: word.id, definition });\n\n      // After animation, add to matched pairs\n      setTimeout(() => {\n        setMatchedPairs((prev) => {\n          const newSet = new Set(prev);\n          newSet.add(word.id);\n          return newSet;\n        });\n        setAnimatingMatch(null);\n      }, 1200); // Animation duration\n    } else {\n      // Show incorrect match animation\n      setIncorrectMatch({ wordId: word.id, definition });\n\n      // After showing red feedback, clear it\n      setTimeout(() => {\n        setIncorrectMatch(null);\n      }, 800); // Shorter duration for incorrect feedback\n    }\n\n    // Only call onAnswer when we have a complete attempt (word + definition)\n    onAnswer(isCorrect);\n    setSelectedWord(null);\n    setSelectedDefinition(null);\n  };\n\n  const handleWordClick = (word: Word) => {\n    if (matchedPairs.has(word.id) || animatingMatch || incorrectMatch) return;\n    \n    if (selectedDefinition) {\n      // We have a definition selected, make the attempt\n      makeAttempt(word, selectedDefinition);\n    } else {\n      // Just select the word\n      setSelectedWord(word);\n      setSelectedDefinition(null);\n    }\n  };\n\n  const handleDefinitionClick = (definition: string) => {\n    if (animatingMatch || incorrectMatch) return; // Prevent clicks during animation\n\n    if (selectedWord) {\n      // We have a word selected, make the attempt\n      makeAttempt(selectedWord, definition);\n    } else {\n      // Just select the definition\n      setSelectedDefinition(definition);\n      setSelectedWord(null);\n    }\n  };\n\n  // Filter out matched words and definitions\n  const availableWords = words.filter((word) => !matchedPairs.has(word.id));\n  const availableDefinitions = shuffledDefinitions.filter((definition) => {\n    // Find the word that has this definition\n    const wordWithDefinition = words.find(\n      (word) => word.definition === definition\n    );\n    return wordWithDefinition && !matchedPairs.has(wordWithDefinition.id);\n  });\n\n  return (\n    <div className=\"match-container\">\n      <div className=\"word-list\">\n        {availableWords.map((word) => (\n          <div\n            key={word.id}\n            className={`word-item ${\n              selectedWord?.id === word.id ? \"selected\" : \"\"\n            } ${animatingMatch?.wordId === word.id ? \"connecting\" : \"\"} ${\n              incorrectMatch?.wordId === word.id ? \"incorrect-flash\" : \"\"\n            }`}\n            onClick={() => handleWordClick(word)}\n          >\n            {word.word}\n          </div>\n        ))}\n        {availableWords.length === 0 && !animatingMatch && (\n          <div className=\"completion-message\">\n            🎉 All words matched! Great job!\n          </div>\n        )}\n      </div>\n\n      <div className=\"definition-list\">\n        {availableDefinitions.map((definition, index) => (\n          <div\n            key={index}\n            className={`definition-item ${\n              selectedDefinition === definition ? \"selected\" : \"\"\n            } ${\n              animatingMatch?.definition === definition ? \"connecting\" : \"\"\n            } ${\n              incorrectMatch?.definition === definition ? \"incorrect-flash\" : \"\"\n            }`}\n            onClick={() => handleDefinitionClick(definition)}\n          >\n            {definition}\n          </div>\n        ))}\n        {availableDefinitions.length === 0 && !animatingMatch && (\n          <div className=\"completion-message\">\n            🎉 All definitions matched! Excellent work!\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DefinitionMatch;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQnD,MAAMC,eAA+C,GAAGA,CAAC;EACvDC,KAAK;EACLC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAc,IAAI,CAAC;EACnE,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAC1D,IACF,CAAC;EACD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAc,IAAIc,GAAG,CAAC,CAAC,CAAC;EACxE,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGhB,QAAQ,CAAW,EAAE,CAAC;EAC5E,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAG1C,IAAI,CAAC;EACf,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAG1C,IAAI,CAAC;EAEfC,SAAS,CAAC,MAAM;IACd;IACA,MAAMoB,WAAW,GAAGhB,KAAK,CAACiB,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,UAAU,CAAC;IACxDR,sBAAsB,CAAC,CAAC,GAAGK,WAAW,CAAC,CAACI,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;EAC1E,CAAC,EAAE,CAACtB,KAAK,CAAC,CAAC;EAEX,MAAMuB,WAAW,GAAGA,CAACL,IAAU,EAAEC,UAAkB,KAAK;IACtD,MAAMK,SAAS,GAAGN,IAAI,CAACC,UAAU,KAAKA,UAAU;IAEhD,IAAIK,SAAS,EAAE;MACb;MACAX,iBAAiB,CAAC;QAAEY,MAAM,EAAEP,IAAI,CAACQ,EAAE;QAAEP;MAAW,CAAC,CAAC;;MAElD;MACAQ,UAAU,CAAC,MAAM;QACfnB,eAAe,CAAEoB,IAAI,IAAK;UACxB,MAAMC,MAAM,GAAG,IAAIpB,GAAG,CAACmB,IAAI,CAAC;UAC5BC,MAAM,CAACC,GAAG,CAACZ,IAAI,CAACQ,EAAE,CAAC;UACnB,OAAOG,MAAM;QACf,CAAC,CAAC;QACFhB,iBAAiB,CAAC,IAAI,CAAC;MACzB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ,CAAC,MAAM;MACL;MACAE,iBAAiB,CAAC;QAAEU,MAAM,EAAEP,IAAI,CAACQ,EAAE;QAAEP;MAAW,CAAC,CAAC;;MAElD;MACAQ,UAAU,CAAC,MAAM;QACfZ,iBAAiB,CAAC,IAAI,CAAC;MACzB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX;;IAEA;IACAd,QAAQ,CAACuB,SAAS,CAAC;IACnBpB,eAAe,CAAC,IAAI,CAAC;IACrBE,qBAAqB,CAAC,IAAI,CAAC;EAC7B,CAAC;EAED,MAAMyB,eAAe,GAAIb,IAAU,IAAK;IACtC,IAAIX,YAAY,CAACyB,GAAG,CAACd,IAAI,CAACQ,EAAE,CAAC,IAAId,cAAc,IAAIE,cAAc,EAAE;IAEnE,IAAIT,kBAAkB,EAAE;MACtB;MACAkB,WAAW,CAACL,IAAI,EAAEb,kBAAkB,CAAC;IACvC,CAAC,MAAM;MACL;MACAD,eAAe,CAACc,IAAI,CAAC;MACrBZ,qBAAqB,CAAC,IAAI,CAAC;IAC7B;EACF,CAAC;EAED,MAAM2B,qBAAqB,GAAId,UAAkB,IAAK;IACpD,IAAIP,cAAc,IAAIE,cAAc,EAAE,OAAO,CAAC;;IAE9C,IAAIX,YAAY,EAAE;MAChB;MACAoB,WAAW,CAACpB,YAAY,EAAEgB,UAAU,CAAC;IACvC,CAAC,MAAM;MACL;MACAb,qBAAqB,CAACa,UAAU,CAAC;MACjCf,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAM8B,cAAc,GAAGlC,KAAK,CAACmC,MAAM,CAAEjB,IAAI,IAAK,CAACX,YAAY,CAACyB,GAAG,CAACd,IAAI,CAACQ,EAAE,CAAC,CAAC;EACzE,MAAMU,oBAAoB,GAAG1B,mBAAmB,CAACyB,MAAM,CAAEhB,UAAU,IAAK;IACtE;IACA,MAAMkB,kBAAkB,GAAGrC,KAAK,CAACsC,IAAI,CAClCpB,IAAI,IAAKA,IAAI,CAACC,UAAU,KAAKA,UAChC,CAAC;IACD,OAAOkB,kBAAkB,IAAI,CAAC9B,YAAY,CAACyB,GAAG,CAACK,kBAAkB,CAACX,EAAE,CAAC;EACvE,CAAC,CAAC;EAEF,oBACE5B,OAAA;IAAKyC,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B1C,OAAA;MAAKyC,SAAS,EAAC,WAAW;MAAAC,QAAA,GACvBN,cAAc,CAACjB,GAAG,CAAEC,IAAI,iBACvBpB,OAAA;QAEEyC,SAAS,EAAE,aACT,CAAApC,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEuB,EAAE,MAAKR,IAAI,CAACQ,EAAE,GAAG,UAAU,GAAG,EAAE,IAC5C,CAAAd,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEa,MAAM,MAAKP,IAAI,CAACQ,EAAE,GAAG,YAAY,GAAG,EAAE,IACxD,CAAAZ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEW,MAAM,MAAKP,IAAI,CAACQ,EAAE,GAAG,iBAAiB,GAAG,EAAE,EAC1D;QACHe,OAAO,EAAEA,CAAA,KAAMV,eAAe,CAACb,IAAI,CAAE;QAAAsB,QAAA,EAEpCtB,IAAI,CAACA;MAAI,GARLA,IAAI,CAACQ,EAAE;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAST,CACN,CAAC,EACDX,cAAc,CAACY,MAAM,KAAK,CAAC,IAAI,CAAClC,cAAc,iBAC7Cd,OAAA;QAAKyC,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAEpC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEN/C,OAAA;MAAKyC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,GAC7BJ,oBAAoB,CAACnB,GAAG,CAAC,CAACE,UAAU,EAAE4B,KAAK,kBAC1CjD,OAAA;QAEEyC,SAAS,EAAE,mBACTlC,kBAAkB,KAAKc,UAAU,GAAG,UAAU,GAAG,EAAE,IAEnD,CAAAP,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEO,UAAU,MAAKA,UAAU,GAAG,YAAY,GAAG,EAAE,IAE7D,CAAAL,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEK,UAAU,MAAKA,UAAU,GAAG,iBAAiB,GAAG,EAAE,EACjE;QACHsB,OAAO,EAAEA,CAAA,KAAMR,qBAAqB,CAACd,UAAU,CAAE;QAAAqB,QAAA,EAEhDrB;MAAU,GAVN4B,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWP,CACN,CAAC,EACDT,oBAAoB,CAACU,MAAM,KAAK,CAAC,IAAI,CAAClC,cAAc,iBACnDd,OAAA;QAAKyC,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAEpC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3C,EAAA,CA5IIH,eAA+C;AAAAiD,EAAA,GAA/CjD,eAA+C;AA8IrD,eAAeA,eAAe;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}