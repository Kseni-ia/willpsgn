{"ast":null,"code":"var _jsxFileName = \"/Users/kseniia/Desktop/WillPsGn/src/components/DefinitionMatch.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DefinitionMatch = ({\n  words,\n  onAnswer\n}) => {\n  _s();\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [selectedDefinition, setSelectedDefinition] = useState(null);\n  const [matchedPairs, setMatchedPairs] = useState(new Set());\n  const [shuffledDefinitions, setShuffledDefinitions] = useState([]);\n  const [animatingMatch, setAnimatingMatch] = useState(null);\n  const [incorrectMatch, setIncorrectMatch] = useState(null);\n  const [attemptInProgress, setAttemptInProgress] = useState(false);\n  const processedAttemptsRef = useRef(new Set());\n  useEffect(() => {\n    // Shuffle definitions when component mounts or words change\n    const definitions = words.map(word => word.definition);\n    setShuffledDefinitions([...definitions].sort(() => Math.random() - 0.5));\n  }, [words]);\n  const makeAttempt = (word, definition) => {\n    if (attemptInProgress) {\n      console.log(\"Attempt already in progress, ignoring...\");\n      return;\n    }\n    console.log(`Starting attempt: ${word.word} + definition`);\n    setAttemptInProgress(true);\n\n    // Clear selections immediately to prevent double-calls\n    setSelectedWord(null);\n    setSelectedDefinition(null);\n    const isCorrect = word.definition === definition;\n    console.log(`Making attempt: ${word.word} + definition → ${isCorrect ? \"CORRECT\" : \"INCORRECT\"}`);\n\n    // Call onAnswer only once per attempt\n    console.log(`Calling onAnswer with: ${isCorrect}`);\n    onAnswer(isCorrect);\n    if (isCorrect) {\n      // Start connection animation\n      setAnimatingMatch({\n        wordId: word.id,\n        definition\n      });\n\n      // After animation, add to matched pairs\n      setTimeout(() => {\n        setMatchedPairs(prev => {\n          const newSet = new Set(prev);\n          newSet.add(word.id);\n          return newSet;\n        });\n        setAnimatingMatch(null);\n        setAttemptInProgress(false);\n        console.log(\"Correct attempt completed, resetting flags\");\n      }, 1200); // Animation duration\n    } else {\n      // Show incorrect match animation\n      setIncorrectMatch({\n        wordId: word.id,\n        definition\n      });\n\n      // After showing red feedback, clear it\n      setTimeout(() => {\n        setIncorrectMatch(null);\n        setAttemptInProgress(false);\n        console.log(\"Incorrect attempt completed, resetting flags\");\n      }, 800); // Shorter duration for incorrect feedback\n    }\n  };\n  const handleWordClick = word => {\n    if (matchedPairs.has(word.id) || animatingMatch || incorrectMatch) return;\n    console.log(`Word clicked: ${word.word}, selectedDefinition: ${selectedDefinition ? \"exists\" : \"none\"}`);\n    if (selectedDefinition) {\n      // We have a definition selected, make the attempt\n      makeAttempt(word, selectedDefinition);\n    } else {\n      // Just select the word\n      setSelectedWord(word);\n      setSelectedDefinition(null);\n    }\n  };\n  const handleDefinitionClick = definition => {\n    if (animatingMatch || incorrectMatch) return; // Prevent clicks during animation\n\n    console.log(`Definition clicked, selectedWord: ${selectedWord ? selectedWord.word : \"none\"}`);\n    if (selectedWord) {\n      // We have a word selected, make the attempt\n      makeAttempt(selectedWord, definition);\n    } else {\n      // Just select the definition\n      setSelectedDefinition(definition);\n      setSelectedWord(null);\n    }\n  };\n\n  // Filter out matched words and definitions\n  const availableWords = words.filter(word => !matchedPairs.has(word.id));\n  const availableDefinitions = shuffledDefinitions.filter(definition => {\n    // Find the word that has this definition\n    const wordWithDefinition = words.find(word => word.definition === definition);\n    return wordWithDefinition && !matchedPairs.has(wordWithDefinition.id);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"match-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-list\",\n      children: [availableWords.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `word-item ${(selectedWord === null || selectedWord === void 0 ? void 0 : selectedWord.id) === word.id ? \"selected\" : \"\"} ${(animatingMatch === null || animatingMatch === void 0 ? void 0 : animatingMatch.wordId) === word.id ? \"connecting\" : \"\"} ${(incorrectMatch === null || incorrectMatch === void 0 ? void 0 : incorrectMatch.wordId) === word.id ? \"incorrect-flash\" : \"\"}`,\n        onClick: () => handleWordClick(word),\n        children: word.word\n      }, word.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)), availableWords.length === 0 && !animatingMatch && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"completion-message\",\n        children: \"\\uD83C\\uDF89 All words matched! Great job!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"definition-list\",\n      children: [availableDefinitions.map((definition, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `definition-item ${selectedDefinition === definition ? \"selected\" : \"\"} ${(animatingMatch === null || animatingMatch === void 0 ? void 0 : animatingMatch.definition) === definition ? \"connecting\" : \"\"} ${(incorrectMatch === null || incorrectMatch === void 0 ? void 0 : incorrectMatch.definition) === definition ? \"incorrect-flash\" : \"\"}`,\n        onClick: () => handleDefinitionClick(definition),\n        children: definition\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)), availableDefinitions.length === 0 && !animatingMatch && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"completion-message\",\n        children: \"\\uD83C\\uDF89 All definitions matched! Excellent work!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(DefinitionMatch, \"1uNjSS/xxziq4kUHPrTgTNwMmjY=\");\n_c = DefinitionMatch;\nexport default DefinitionMatch;\nvar _c;\n$RefreshReg$(_c, \"DefinitionMatch\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","DefinitionMatch","words","onAnswer","_s","selectedWord","setSelectedWord","selectedDefinition","setSelectedDefinition","matchedPairs","setMatchedPairs","Set","shuffledDefinitions","setShuffledDefinitions","animatingMatch","setAnimatingMatch","incorrectMatch","setIncorrectMatch","attemptInProgress","setAttemptInProgress","processedAttemptsRef","definitions","map","word","definition","sort","Math","random","makeAttempt","console","log","isCorrect","wordId","id","setTimeout","prev","newSet","add","handleWordClick","has","handleDefinitionClick","availableWords","filter","availableDefinitions","wordWithDefinition","find","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","index","_c","$RefreshReg$"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/DefinitionMatch.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface DefinitionMatchProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n}\n\nconst DefinitionMatch: React.FC<DefinitionMatchProps> = ({\n  words,\n  onAnswer,\n}) => {\n  const [selectedWord, setSelectedWord] = useState<Word | null>(null);\n  const [selectedDefinition, setSelectedDefinition] = useState<string | null>(\n    null\n  );\n  const [matchedPairs, setMatchedPairs] = useState<Set<number>>(new Set());\n  const [shuffledDefinitions, setShuffledDefinitions] = useState<string[]>([]);\n  const [animatingMatch, setAnimatingMatch] = useState<{\n    wordId: number;\n    definition: string;\n  } | null>(null);\n  const [incorrectMatch, setIncorrectMatch] = useState<{\n    wordId: number;\n    definition: string;\n  } | null>(null);\n  const [attemptInProgress, setAttemptInProgress] = useState<boolean>(false);\n  const processedAttemptsRef = useRef<Set<string>>(new Set());\n\n  useEffect(() => {\n    // Shuffle definitions when component mounts or words change\n    const definitions = words.map((word) => word.definition);\n    setShuffledDefinitions([...definitions].sort(() => Math.random() - 0.5));\n  }, [words]);\n\n  const makeAttempt = (word: Word, definition: string) => {\n    if (attemptInProgress) {\n      console.log(\"Attempt already in progress, ignoring...\");\n      return;\n    }\n\n    console.log(`Starting attempt: ${word.word} + definition`);\n    setAttemptInProgress(true);\n\n    // Clear selections immediately to prevent double-calls\n    setSelectedWord(null);\n    setSelectedDefinition(null);\n\n    const isCorrect = word.definition === definition;\n\n    console.log(\n      `Making attempt: ${word.word} + definition → ${\n        isCorrect ? \"CORRECT\" : \"INCORRECT\"\n      }`\n    );\n\n    // Call onAnswer only once per attempt\n    console.log(`Calling onAnswer with: ${isCorrect}`);\n    onAnswer(isCorrect);\n\n    if (isCorrect) {\n      // Start connection animation\n      setAnimatingMatch({ wordId: word.id, definition });\n\n      // After animation, add to matched pairs\n      setTimeout(() => {\n        setMatchedPairs((prev) => {\n          const newSet = new Set(prev);\n          newSet.add(word.id);\n          return newSet;\n        });\n        setAnimatingMatch(null);\n        setAttemptInProgress(false);\n        console.log(\"Correct attempt completed, resetting flags\");\n      }, 1200); // Animation duration\n    } else {\n      // Show incorrect match animation\n      setIncorrectMatch({ wordId: word.id, definition });\n\n      // After showing red feedback, clear it\n      setTimeout(() => {\n        setIncorrectMatch(null);\n        setAttemptInProgress(false);\n        console.log(\"Incorrect attempt completed, resetting flags\");\n      }, 800); // Shorter duration for incorrect feedback\n    }\n  };\n\n  const handleWordClick = (word: Word) => {\n    if (matchedPairs.has(word.id) || animatingMatch || incorrectMatch) return;\n\n    console.log(\n      `Word clicked: ${word.word}, selectedDefinition: ${\n        selectedDefinition ? \"exists\" : \"none\"\n      }`\n    );\n\n    if (selectedDefinition) {\n      // We have a definition selected, make the attempt\n      makeAttempt(word, selectedDefinition);\n    } else {\n      // Just select the word\n      setSelectedWord(word);\n      setSelectedDefinition(null);\n    }\n  };\n\n  const handleDefinitionClick = (definition: string) => {\n    if (animatingMatch || incorrectMatch) return; // Prevent clicks during animation\n\n    console.log(\n      `Definition clicked, selectedWord: ${\n        selectedWord ? selectedWord.word : \"none\"\n      }`\n    );\n\n    if (selectedWord) {\n      // We have a word selected, make the attempt\n      makeAttempt(selectedWord, definition);\n    } else {\n      // Just select the definition\n      setSelectedDefinition(definition);\n      setSelectedWord(null);\n    }\n  };\n\n  // Filter out matched words and definitions\n  const availableWords = words.filter((word) => !matchedPairs.has(word.id));\n  const availableDefinitions = shuffledDefinitions.filter((definition) => {\n    // Find the word that has this definition\n    const wordWithDefinition = words.find(\n      (word) => word.definition === definition\n    );\n    return wordWithDefinition && !matchedPairs.has(wordWithDefinition.id);\n  });\n\n  return (\n    <div className=\"match-container\">\n      <div className=\"word-list\">\n        {availableWords.map((word) => (\n          <div\n            key={word.id}\n            className={`word-item ${\n              selectedWord?.id === word.id ? \"selected\" : \"\"\n            } ${animatingMatch?.wordId === word.id ? \"connecting\" : \"\"} ${\n              incorrectMatch?.wordId === word.id ? \"incorrect-flash\" : \"\"\n            }`}\n            onClick={() => handleWordClick(word)}\n          >\n            {word.word}\n          </div>\n        ))}\n        {availableWords.length === 0 && !animatingMatch && (\n          <div className=\"completion-message\">\n            🎉 All words matched! Great job!\n          </div>\n        )}\n      </div>\n\n      <div className=\"definition-list\">\n        {availableDefinitions.map((definition, index) => (\n          <div\n            key={index}\n            className={`definition-item ${\n              selectedDefinition === definition ? \"selected\" : \"\"\n            } ${\n              animatingMatch?.definition === definition ? \"connecting\" : \"\"\n            } ${\n              incorrectMatch?.definition === definition ? \"incorrect-flash\" : \"\"\n            }`}\n            onClick={() => handleDefinitionClick(definition)}\n          >\n            {definition}\n          </div>\n        ))}\n        {availableDefinitions.length === 0 && !animatingMatch && (\n          <div className=\"completion-message\">\n            🎉 All definitions matched! Excellent work!\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DefinitionMatch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}