{"ast":null,"code":"var _jsxFileName = \"/Users/kseniia/Desktop/WillPsGn/src/components/AntonymExercise.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AntonymExercise = ({\n  words,\n  onAnswer\n}) => {\n  _s();\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [userInput, setUserInput] = useState(\"\");\n  const [feedback, setFeedback] = useState(null);\n  const [feedbackMessage, setFeedbackMessage] = useState(\"\");\n  const currentWord = words[currentWordIndex];\n\n  // Function to normalize text for comparison\n  const normalizeText = text => {\n    return text.toLowerCase().trim().replace(/[^a-z\\s]/g, \"\");\n  };\n\n  // Function to check if input is close to any antonym\n  const findCloseMatch = (input, antonyms) => {\n    const normalizedInput = normalizeText(input);\n    for (const antonym of antonyms) {\n      const normalizedAntonym = normalizeText(antonym);\n\n      // Check for partial matches or plurals\n      if (normalizedAntonym.includes(normalizedInput) || normalizedInput.includes(normalizedAntonym)) {\n        return antonym;\n      }\n\n      // Check for common variations (e.g., \"start\" vs \"starting\")\n      if (normalizedInput.endsWith(\"ing\") && normalizedAntonym === normalizedInput.slice(0, -3)) {\n        return antonym;\n      }\n      if (normalizedAntonym.endsWith(\"ing\") && normalizedInput === normalizedAntonym.slice(0, -3)) {\n        return antonym;\n      }\n\n      // Check for plural forms\n      if (normalizedInput.endsWith(\"s\") && normalizedAntonym === normalizedInput.slice(0, -1)) {\n        return antonym;\n      }\n      if (normalizedAntonym.endsWith(\"s\") && normalizedInput === normalizedAntonym.slice(0, -1)) {\n        return antonym;\n      }\n    }\n    return null;\n  };\n  const skipWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex(prev => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    }\n  };\n  const moveToNextWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex(prev => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    } else {\n      // Exercise completed\n      setFeedback(\"correct\");\n      setFeedbackMessage(\"ðŸŽ‰ Exercise completed! Great job!\");\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!userInput.trim()) return;\n    const normalizedInput = normalizeText(userInput);\n\n    // Check for exact matches first\n    const isExactMatch = currentWord.antonyms.some(antonym => normalizeText(antonym) === normalizedInput);\n    if (isExactMatch) {\n      setFeedback(\"correct\");\n      setFeedbackMessage(\"Excellent! That's a perfect antonym!\");\n      onAnswer(true);\n\n      // Auto-advance for correct answers\n      setTimeout(() => {\n        moveToNextWord();\n      }, 2000);\n    } else {\n      // Check for close matches\n      const closeMatch = findCloseMatch(userInput, currentWord.antonyms);\n      if (closeMatch) {\n        setFeedback(\"close\");\n        setFeedbackMessage(`Very close! You wrote \"${userInput}\" - the exact form is \"${closeMatch}\"`);\n        onAnswer(true); // Count as correct since it's close\n\n        // Auto-advance for close answers\n        setTimeout(() => {\n          moveToNextWord();\n        }, 2000);\n      } else {\n        setFeedback(\"incorrect\");\n        setFeedbackMessage(`Not quite right. Try thinking of words that mean the opposite of \"${currentWord.word}\"`);\n        onAnswer(false);\n\n        // Do NOT auto-advance for incorrect answers - user must click \"Next Word\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"syn-ant-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-progress\",\n      children: [\"Word \", currentWordIndex + 1, \" of \", words.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"word-label\",\n            children: \"Word:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"word-value\",\n            children: currentWord.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"word-label\",\n              children: \"Antonym:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: `input-field ${feedback || \"\"}`,\n              value: userInput,\n              onChange: e => setUserInput(e.target.value),\n              placeholder: \"Enter an antonym (opposite meaning)...\",\n              disabled: feedback !== null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"game-btn\",\n              disabled: !userInput.trim() || feedback !== null,\n              children: \"Check Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), feedback === null && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"skip-btn\",\n              onClick: skipWord,\n              children: \"Skip Word\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), feedback === \"incorrect\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"next-word-btn\",\n              onClick: moveToNextWord,\n              children: \"Next Word\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-right\",\n        children: feedback && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `feedback ${feedback}`,\n          children: [feedbackMessage, feedback === \"incorrect\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Hint:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 19\n            }, this), \" Some antonyms for \\\"\", currentWord.word, \"\\\" are: \", currentWord.antonyms.slice(0, 3).join(\", \")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(AntonymExercise, \"t0sZuaRxpzs78EY52NFQd+s/QYA=\");\n_c = AntonymExercise;\nexport default AntonymExercise;\nvar _c;\n$RefreshReg$(_c, \"AntonymExercise\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AntonymExercise","words","onAnswer","_s","currentWordIndex","setCurrentWordIndex","userInput","setUserInput","feedback","setFeedback","feedbackMessage","setFeedbackMessage","currentWord","normalizeText","text","toLowerCase","trim","replace","findCloseMatch","input","antonyms","normalizedInput","antonym","normalizedAntonym","includes","endsWith","slice","skipWord","length","prev","moveToNextWord","handleSubmit","e","preventDefault","isExactMatch","some","setTimeout","closeMatch","word","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","disabled","onClick","join","_c","$RefreshReg$"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/AntonymExercise.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface AntonymExerciseProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n}\n\nconst AntonymExercise: React.FC<AntonymExerciseProps> = ({\n  words,\n  onAnswer,\n}) => {\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [userInput, setUserInput] = useState(\"\");\n  const [feedback, setFeedback] = useState<\n    \"correct\" | \"incorrect\" | \"close\" | null\n  >(null);\n  const [feedbackMessage, setFeedbackMessage] = useState(\"\");\n\n  const currentWord = words[currentWordIndex];\n\n  // Function to normalize text for comparison\n  const normalizeText = (text: string): string => {\n    return text\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z\\s]/g, \"\");\n  };\n\n  // Function to check if input is close to any antonym\n  const findCloseMatch = (input: string, antonyms: string[]): string | null => {\n    const normalizedInput = normalizeText(input);\n\n    for (const antonym of antonyms) {\n      const normalizedAntonym = normalizeText(antonym);\n\n      // Check for partial matches or plurals\n      if (\n        normalizedAntonym.includes(normalizedInput) ||\n        normalizedInput.includes(normalizedAntonym)\n      ) {\n        return antonym;\n      }\n\n      // Check for common variations (e.g., \"start\" vs \"starting\")\n      if (\n        normalizedInput.endsWith(\"ing\") &&\n        normalizedAntonym === normalizedInput.slice(0, -3)\n      ) {\n        return antonym;\n      }\n      if (\n        normalizedAntonym.endsWith(\"ing\") &&\n        normalizedInput === normalizedAntonym.slice(0, -3)\n      ) {\n        return antonym;\n      }\n\n      // Check for plural forms\n      if (\n        normalizedInput.endsWith(\"s\") &&\n        normalizedAntonym === normalizedInput.slice(0, -1)\n      ) {\n        return antonym;\n      }\n      if (\n        normalizedAntonym.endsWith(\"s\") &&\n        normalizedInput === normalizedAntonym.slice(0, -1)\n      ) {\n        return antonym;\n      }\n    }\n\n    return null;\n  };\n\n  const skipWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex((prev) => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    }\n  };\n\n  const moveToNextWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex((prev) => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    } else {\n      // Exercise completed\n      setFeedback(\"correct\");\n      setFeedbackMessage(\"ðŸŽ‰ Exercise completed! Great job!\");\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!userInput.trim()) return;\n\n    const normalizedInput = normalizeText(userInput);\n\n    // Check for exact matches first\n    const isExactMatch = currentWord.antonyms.some(\n      (antonym) => normalizeText(antonym) === normalizedInput\n    );\n\n    if (isExactMatch) {\n      setFeedback(\"correct\");\n      setFeedbackMessage(\"Excellent! That's a perfect antonym!\");\n      onAnswer(true);\n\n      // Auto-advance for correct answers\n      setTimeout(() => {\n        moveToNextWord();\n      }, 2000);\n    } else {\n      // Check for close matches\n      const closeMatch = findCloseMatch(userInput, currentWord.antonyms);\n\n      if (closeMatch) {\n        setFeedback(\"close\");\n        setFeedbackMessage(\n          `Very close! You wrote \"${userInput}\" - the exact form is \"${closeMatch}\"`\n        );\n        onAnswer(true); // Count as correct since it's close\n\n        // Auto-advance for close answers\n        setTimeout(() => {\n          moveToNextWord();\n        }, 2000);\n      } else {\n        setFeedback(\"incorrect\");\n        setFeedbackMessage(\n          `Not quite right. Try thinking of words that mean the opposite of \"${currentWord.word}\"`\n        );\n        onAnswer(false);\n\n        // Do NOT auto-advance for incorrect answers - user must click \"Next Word\"\n      }\n    }\n  };\n\n  return (\n    <div className=\"syn-ant-container\">\n      <div className=\"word-progress\">\n        Word {currentWordIndex + 1} of {words.length}\n      </div>\n\n      <div className=\"exercise-content\">\n        <div className=\"exercise-left\">\n          <div className=\"word-row\">\n            <span className=\"word-label\">Word:</span>\n            <span className=\"word-value\">{currentWord.word}</span>\n          </div>\n\n          <form onSubmit={handleSubmit}>\n            <div className=\"word-row\">\n              <span className=\"word-label\">Antonym:</span>\n              <input\n                type=\"text\"\n                className={`input-field ${feedback || \"\"}`}\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                placeholder=\"Enter an antonym (opposite meaning)...\"\n                disabled={feedback !== null}\n              />\n            </div>\n\n            <div className=\"button-group\">\n              <button\n                type=\"submit\"\n                className=\"game-btn\"\n                disabled={!userInput.trim() || feedback !== null}\n              >\n                Check Answer\n              </button>\n\n              {feedback === null && (\n                <button type=\"button\" className=\"skip-btn\" onClick={skipWord}>\n                  Skip Word\n                </button>\n              )}\n\n              {feedback === \"incorrect\" && (\n                <button\n                  type=\"button\"\n                  className=\"next-word-btn\"\n                  onClick={moveToNextWord}\n                >\n                  Next Word\n                </button>\n              )}\n            </div>\n          </form>\n        </div>\n\n        <div className=\"exercise-right\">\n          {feedback && (\n            <div className={`feedback ${feedback}`}>\n              {feedbackMessage}\n              {feedback === \"incorrect\" && (\n                <div className=\"hint\">\n                  <strong>Hint:</strong> Some antonyms for \"{currentWord.word}\"\n                  are: {currentWord.antonyms.slice(0, 3).join(\", \")}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AntonymExercise;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}