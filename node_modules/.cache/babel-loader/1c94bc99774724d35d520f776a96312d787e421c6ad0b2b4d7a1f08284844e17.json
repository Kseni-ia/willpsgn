{"ast":null,"code":"import React,{useState}from\"react\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const AntonymExercise=_ref=>{let{words,onAnswer,onProgress}=_ref;const[currentWordIndex,setCurrentWordIndex]=useState(0);const[userInput,setUserInput]=useState(\"\");const[feedback,setFeedback]=useState(null);const[feedbackMessage,setFeedbackMessage]=useState(\"\");const[correctAnswers,setCorrectAnswers]=useState(0);const[exerciseCompleted,setExerciseCompleted]=useState(false);const currentWord=words[currentWordIndex];// Update progress whenever word index changes\nReact.useEffect(()=>{onProgress(currentWordIndex);},[currentWordIndex,onProgress]);// Function to normalize text for comparison\nconst normalizeText=text=>{return text.toLowerCase().trim().replace(/[^a-z\\s]/g,\"\");};// Function to check if input is close to any antonym\nconst findCloseMatch=(input,antonyms)=>{const normalizedInput=normalizeText(input);for(const antonym of antonyms){const normalizedAntonym=normalizeText(antonym);// Check for partial matches or plurals\nif(normalizedAntonym.includes(normalizedInput)||normalizedInput.includes(normalizedAntonym)){return antonym;}// Check for common variations (e.g., \"start\" vs \"starting\")\nif(normalizedInput.endsWith(\"ing\")&&normalizedAntonym===normalizedInput.slice(0,-3)){return antonym;}if(normalizedAntonym.endsWith(\"ing\")&&normalizedInput===normalizedAntonym.slice(0,-3)){return antonym;}// Check for plural forms\nif(normalizedInput.endsWith(\"s\")&&normalizedAntonym===normalizedInput.slice(0,-1)){return antonym;}if(normalizedAntonym.endsWith(\"s\")&&normalizedInput===normalizedAntonym.slice(0,-1)){return antonym;}}return null;};const skipWord=()=>{if(currentWordIndex<words.length-1){setCurrentWordIndex(prev=>prev+1);setUserInput(\"\");setFeedback(null);setFeedbackMessage(\"\");}};const moveToNextWord=()=>{if(currentWordIndex<words.length-1){setCurrentWordIndex(prev=>prev+1);setUserInput(\"\");setFeedback(null);setFeedbackMessage(\"\");}else{// Exercise completed\nsetExerciseCompleted(true);const percentage=words.length>0?Math.round(correctAnswers/words.length*100):0;setFeedback(\"correct\");setFeedbackMessage(\"\\uD83C\\uDF89 Exercise completed! Your score: \".concat(correctAnswers,\"/\").concat(words.length,\" (\").concat(percentage,\"%)\"));}};const handleSubmit=e=>{e.preventDefault();if(!userInput.trim())return;const normalizedInput=normalizeText(userInput);// Check for exact matches first\nconst isExactMatch=currentWord.antonyms.some(antonym=>normalizeText(antonym)===normalizedInput);if(isExactMatch){setFeedback(\"correct\");setFeedbackMessage(\"Excellent! That's a perfect antonym!\");setCorrectAnswers(prev=>prev+1);onAnswer(true);// Auto-advance for correct answers\nsetTimeout(()=>{moveToNextWord();},2000);}else{// Check for close matches\nconst closeMatch=findCloseMatch(userInput,currentWord.antonyms);if(closeMatch){setFeedback(\"close\");setFeedbackMessage(\"Very close! You wrote \\\"\".concat(userInput,\"\\\" - the exact form is \\\"\").concat(closeMatch,\"\\\"\"));setCorrectAnswers(prev=>prev+1);onAnswer(true);// Auto-advance for close answers\nsetTimeout(()=>{moveToNextWord();},2000);}else{setFeedback(\"incorrect\");setFeedbackMessage(\"Not quite right. Try thinking of words that mean the opposite of \\\"\".concat(currentWord.word,\"\\\"\"));onAnswer(false);// Do NOT auto-advance for incorrect answers - user must click \"Next Word\"\n}}};const restartExercise=()=>{setCurrentWordIndex(0);setUserInput(\"\");setFeedback(null);setFeedbackMessage(\"\");setCorrectAnswers(0);setExerciseCompleted(false);};return/*#__PURE__*/_jsxs(\"div\",{className:\"syn-ant-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"word-progress\",children:exerciseCompleted?\"Final Score: \".concat(correctAnswers):\"Word \".concat(currentWordIndex+1,\" of \").concat(words.length,\" | Score: \").concat(correctAnswers)}),/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-left\",children:[!exerciseCompleted&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"word-row\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"word-label\",children:\"Word:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"word-value\",children:currentWord.word})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"word-row\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"word-label\",children:\"Antonym:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"input-field \".concat(feedback||\"\"),value:userInput,onChange:e=>setUserInput(e.target.value),placeholder:\"Enter an antonym (opposite meaning)...\",disabled:feedback!==null})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"game-btn\",disabled:!userInput.trim()||feedback!==null,children:\"Check Answer\"}),feedback===null&&/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"skip-btn\",onClick:skipWord,children:\"Skip Word\"}),feedback===\"incorrect\"&&/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"next-word-btn\",onClick:moveToNextWord,children:\"Next Word\"})]})]})]}),exerciseCompleted&&/*#__PURE__*/_jsx(\"div\",{className:\"completion-buttons\",children:/*#__PURE__*/_jsx(\"button\",{className:\"game-btn\",onClick:restartExercise,children:\"Try Again\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"exercise-right\",children:feedback&&/*#__PURE__*/_jsxs(\"div\",{className:\"feedback \".concat(feedback),children:[feedbackMessage,feedback===\"incorrect\"&&!exerciseCompleted&&/*#__PURE__*/_jsxs(\"div\",{className:\"hint\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Hint:\"}),\" Some antonyms for \\\"\",currentWord.word,\"\\\" are: \",currentWord.antonyms.slice(0,3).join(\", \")]})]})})]})]});};export default AntonymExercise;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","AntonymExercise","_ref","words","onAnswer","onProgress","currentWordIndex","setCurrentWordIndex","userInput","setUserInput","feedback","setFeedback","feedbackMessage","setFeedbackMessage","correctAnswers","setCorrectAnswers","exerciseCompleted","setExerciseCompleted","currentWord","useEffect","normalizeText","text","toLowerCase","trim","replace","findCloseMatch","input","antonyms","normalizedInput","antonym","normalizedAntonym","includes","endsWith","slice","skipWord","length","prev","moveToNextWord","percentage","Math","round","concat","handleSubmit","e","preventDefault","isExactMatch","some","setTimeout","closeMatch","word","restartExercise","className","children","onSubmit","type","value","onChange","target","placeholder","disabled","onClick","join"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/AntonymExercise.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface AntonymExerciseProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n  onProgress: (currentIndex: number) => void;\n}\n\nconst AntonymExercise: React.FC<AntonymExerciseProps> = ({\n  words,\n  onAnswer,\n  onProgress,\n}) => {\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [userInput, setUserInput] = useState(\"\");\n  const [feedback, setFeedback] = useState<\n    \"correct\" | \"incorrect\" | \"close\" | null\n  >(null);\n  const [feedbackMessage, setFeedbackMessage] = useState(\"\");\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [exerciseCompleted, setExerciseCompleted] = useState(false);\n\n  const currentWord = words[currentWordIndex];\n\n  // Update progress whenever word index changes\n  React.useEffect(() => {\n    onProgress(currentWordIndex);\n  }, [currentWordIndex, onProgress]);\n\n  // Function to normalize text for comparison\n  const normalizeText = (text: string): string => {\n    return text\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z\\s]/g, \"\");\n  };\n\n  // Function to check if input is close to any antonym\n  const findCloseMatch = (input: string, antonyms: string[]): string | null => {\n    const normalizedInput = normalizeText(input);\n\n    for (const antonym of antonyms) {\n      const normalizedAntonym = normalizeText(antonym);\n\n      // Check for partial matches or plurals\n      if (\n        normalizedAntonym.includes(normalizedInput) ||\n        normalizedInput.includes(normalizedAntonym)\n      ) {\n        return antonym;\n      }\n\n      // Check for common variations (e.g., \"start\" vs \"starting\")\n      if (\n        normalizedInput.endsWith(\"ing\") &&\n        normalizedAntonym === normalizedInput.slice(0, -3)\n      ) {\n        return antonym;\n      }\n      if (\n        normalizedAntonym.endsWith(\"ing\") &&\n        normalizedInput === normalizedAntonym.slice(0, -3)\n      ) {\n        return antonym;\n      }\n\n      // Check for plural forms\n      if (\n        normalizedInput.endsWith(\"s\") &&\n        normalizedAntonym === normalizedInput.slice(0, -1)\n      ) {\n        return antonym;\n      }\n      if (\n        normalizedAntonym.endsWith(\"s\") &&\n        normalizedInput === normalizedAntonym.slice(0, -1)\n      ) {\n        return antonym;\n      }\n    }\n\n    return null;\n  };\n\n  const skipWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex((prev) => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    }\n  };\n\n  const moveToNextWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex((prev) => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    } else {\n      // Exercise completed\n      setExerciseCompleted(true);\n      const percentage =\n        words.length > 0\n          ? Math.round((correctAnswers / words.length) * 100)\n          : 0;\n      setFeedback(\"correct\");\n      setFeedbackMessage(\n        `🎉 Exercise completed! Your score: ${correctAnswers}/${words.length} (${percentage}%)`\n      );\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!userInput.trim()) return;\n\n    const normalizedInput = normalizeText(userInput);\n\n    // Check for exact matches first\n    const isExactMatch = currentWord.antonyms.some(\n      (antonym) => normalizeText(antonym) === normalizedInput\n    );\n\n    if (isExactMatch) {\n      setFeedback(\"correct\");\n      setFeedbackMessage(\"Excellent! That's a perfect antonym!\");\n      setCorrectAnswers((prev) => prev + 1);\n      onAnswer(true);\n\n      // Auto-advance for correct answers\n      setTimeout(() => {\n        moveToNextWord();\n      }, 2000);\n    } else {\n      // Check for close matches\n      const closeMatch = findCloseMatch(userInput, currentWord.antonyms);\n\n      if (closeMatch) {\n        setFeedback(\"close\");\n        setFeedbackMessage(\n          `Very close! You wrote \"${userInput}\" - the exact form is \"${closeMatch}\"`\n        );\n        setCorrectAnswers((prev) => prev + 1);\n        onAnswer(true);\n\n        // Auto-advance for close answers\n        setTimeout(() => {\n          moveToNextWord();\n        }, 2000);\n      } else {\n        setFeedback(\"incorrect\");\n        setFeedbackMessage(\n          `Not quite right. Try thinking of words that mean the opposite of \"${currentWord.word}\"`\n        );\n        onAnswer(false);\n\n        // Do NOT auto-advance for incorrect answers - user must click \"Next Word\"\n      }\n    }\n  };\n\n  const restartExercise = () => {\n    setCurrentWordIndex(0);\n    setUserInput(\"\");\n    setFeedback(null);\n    setFeedbackMessage(\"\");\n    setCorrectAnswers(0);\n    setExerciseCompleted(false);\n  };\n\n  return (\n    <div className=\"syn-ant-container\">\n      <div className=\"word-progress\">\n        {exerciseCompleted\n          ? `Final Score: ${correctAnswers}`\n          : `Word ${currentWordIndex + 1} of ${\n              words.length\n            } | Score: ${correctAnswers}`}\n      </div>\n\n      <div className=\"exercise-content\">\n        <div className=\"exercise-left\">\n          {!exerciseCompleted && (\n            <>\n              <div className=\"word-row\">\n                <span className=\"word-label\">Word:</span>\n                <span className=\"word-value\">{currentWord.word}</span>\n              </div>\n\n              <form onSubmit={handleSubmit}>\n                <div className=\"word-row\">\n                  <span className=\"word-label\">Antonym:</span>\n                  <input\n                    type=\"text\"\n                    className={`input-field ${feedback || \"\"}`}\n                    value={userInput}\n                    onChange={(e) => setUserInput(e.target.value)}\n                    placeholder=\"Enter an antonym (opposite meaning)...\"\n                    disabled={feedback !== null}\n                  />\n                </div>\n\n                <div className=\"button-group\">\n                  <button\n                    type=\"submit\"\n                    className=\"game-btn\"\n                    disabled={!userInput.trim() || feedback !== null}\n                  >\n                    Check Answer\n                  </button>\n\n                  {feedback === null && (\n                    <button\n                      type=\"button\"\n                      className=\"skip-btn\"\n                      onClick={skipWord}\n                    >\n                      Skip Word\n                    </button>\n                  )}\n\n                  {feedback === \"incorrect\" && (\n                    <button\n                      type=\"button\"\n                      className=\"next-word-btn\"\n                      onClick={moveToNextWord}\n                    >\n                      Next Word\n                    </button>\n                  )}\n                </div>\n              </form>\n            </>\n          )}\n\n          {exerciseCompleted && (\n            <div className=\"completion-buttons\">\n              <button className=\"game-btn\" onClick={restartExercise}>\n                Try Again\n              </button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"exercise-right\">\n          {feedback && (\n            <div className={`feedback ${feedback}`}>\n              {feedbackMessage}\n              {feedback === \"incorrect\" && !exerciseCompleted && (\n                <div className=\"hint\">\n                  <strong>Hint:</strong> Some antonyms for \"{currentWord.word}\"\n                  are: {currentWord.antonyms.slice(0, 3).join(\", \")}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AntonymExercise;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}