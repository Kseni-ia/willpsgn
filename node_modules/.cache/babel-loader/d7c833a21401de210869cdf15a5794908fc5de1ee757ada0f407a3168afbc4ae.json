{"ast":null,"code":"var _jsxFileName = \"/Users/kseniia/Desktop/WillPsGn/src/components/AntonymExercise.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AntonymExercise = ({\n  words,\n  onAnswer\n}) => {\n  _s();\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [userInput, setUserInput] = useState(\"\");\n  const [feedback, setFeedback] = useState(null);\n  const [feedbackMessage, setFeedbackMessage] = useState(\"\");\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionsAnswered, setQuestionsAnswered] = useState(0);\n  const [exerciseCompleted, setExerciseCompleted] = useState(false);\n  const currentWord = words[currentWordIndex];\n\n  // Function to normalize text for comparison\n  const normalizeText = text => {\n    return text.toLowerCase().trim().replace(/[^a-z\\s]/g, \"\");\n  };\n\n  // Function to check if input is close to any antonym\n  const findCloseMatch = (input, antonyms) => {\n    const normalizedInput = normalizeText(input);\n    for (const antonym of antonyms) {\n      const normalizedAntonym = normalizeText(antonym);\n\n      // Check for partial matches or plurals\n      if (normalizedAntonym.includes(normalizedInput) || normalizedInput.includes(normalizedAntonym)) {\n        return antonym;\n      }\n\n      // Check for common variations (e.g., \"start\" vs \"starting\")\n      if (normalizedInput.endsWith(\"ing\") && normalizedAntonym === normalizedInput.slice(0, -3)) {\n        return antonym;\n      }\n      if (normalizedAntonym.endsWith(\"ing\") && normalizedInput === normalizedAntonym.slice(0, -3)) {\n        return antonym;\n      }\n\n      // Check for plural forms\n      if (normalizedInput.endsWith(\"s\") && normalizedAntonym === normalizedInput.slice(0, -1)) {\n        return antonym;\n      }\n      if (normalizedAntonym.endsWith(\"s\") && normalizedInput === normalizedAntonym.slice(0, -1)) {\n        return antonym;\n      }\n    }\n    return null;\n  };\n  const skipWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex(prev => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    }\n  };\n  const moveToNextWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex(prev => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    } else {\n      // Exercise completed\n      setExerciseCompleted(true);\n      const percentage = words.length > 0 ? Math.round(correctAnswers / words.length * 100) : 0;\n      setFeedback(\"correct\");\n      setFeedbackMessage(`ðŸŽ‰ Exercise completed! Your score: ${correctAnswers}/${words.length} (${percentage}%)`);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!userInput.trim()) return;\n    const normalizedInput = normalizeText(userInput);\n\n    // Check for exact matches first\n    const isExactMatch = currentWord.antonyms.some(antonym => normalizeText(antonym) === normalizedInput);\n    if (isExactMatch) {\n      setFeedback(\"correct\");\n      setFeedbackMessage(\"Excellent! That's a perfect antonym!\");\n      setCorrectAnswers(prev => prev + 1);\n      setQuestionsAnswered(prev => prev + 1);\n      onAnswer(true);\n\n      // Auto-advance for correct answers\n      setTimeout(() => {\n        moveToNextWord();\n      }, 2000);\n    } else {\n      // Check for close matches\n      const closeMatch = findCloseMatch(userInput, currentWord.antonyms);\n      if (closeMatch) {\n        setFeedback(\"close\");\n        setFeedbackMessage(`Very close! You wrote \"${userInput}\" - the exact form is \"${closeMatch}\"`);\n        setCorrectAnswers(prev => prev + 1);\n        setQuestionsAnswered(prev => prev + 1);\n        onAnswer(true);\n\n        // Auto-advance for close answers\n        setTimeout(() => {\n          moveToNextWord();\n        }, 2000);\n      } else {\n        setFeedback(\"incorrect\");\n        setFeedbackMessage(`Not quite right. Try thinking of words that mean the opposite of \"${currentWord.word}\"`);\n        setQuestionsAnswered(prev => prev + 1);\n        onAnswer(false);\n\n        // Do NOT auto-advance for incorrect answers - user must click \"Next Word\"\n      }\n    }\n  };\n  const restartExercise = () => {\n    setCurrentWordIndex(0);\n    setUserInput(\"\");\n    setFeedback(null);\n    setFeedbackMessage(\"\");\n    setCorrectAnswers(0);\n    setQuestionsAnswered(0);\n    setExerciseCompleted(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"syn-ant-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-progress\",\n      children: exerciseCompleted ? `Final Score: ${correctAnswers}` : `Word ${currentWordIndex + 1} of ${words.length} | Score: ${correctAnswers}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-left\",\n        children: [!exerciseCompleted && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"word-label\",\n              children: \"Word:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"word-value\",\n              children: currentWord.word\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"word-label\",\n                children: \"Antonym:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `input-field ${feedback || \"\"}`,\n                value: userInput,\n                onChange: e => setUserInput(e.target.value),\n                placeholder: \"Enter an antonym (opposite meaning)...\",\n                disabled: feedback !== null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"game-btn\",\n                disabled: !userInput.trim() || feedback !== null,\n                children: \"Check Answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 19\n              }, this), feedback === null && /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"skip-btn\",\n                onClick: skipWord,\n                children: \"Skip Word\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 21\n              }, this), feedback === \"incorrect\" && /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"next-word-btn\",\n                onClick: moveToNextWord,\n                children: \"Next Word\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), exerciseCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"completion-buttons\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"game-btn\",\n            onClick: restartExercise,\n            children: \"Try Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-right\",\n        children: feedback && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `feedback ${feedback}`,\n          children: [feedbackMessage, feedback === \"incorrect\" && !exerciseCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Hint:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 19\n            }, this), \" Some antonyms for \\\"\", currentWord.word, \"\\\" are: \", currentWord.antonyms.slice(0, 3).join(\", \")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(AntonymExercise, \"/2Rzj4lGkqoC+OXcQW7NUPZodQE=\");\n_c = AntonymExercise;\nexport default AntonymExercise;\nvar _c;\n$RefreshReg$(_c, \"AntonymExercise\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","AntonymExercise","words","onAnswer","_s","currentWordIndex","setCurrentWordIndex","userInput","setUserInput","feedback","setFeedback","feedbackMessage","setFeedbackMessage","correctAnswers","setCorrectAnswers","questionsAnswered","setQuestionsAnswered","exerciseCompleted","setExerciseCompleted","currentWord","normalizeText","text","toLowerCase","trim","replace","findCloseMatch","input","antonyms","normalizedInput","antonym","normalizedAntonym","includes","endsWith","slice","skipWord","length","prev","moveToNextWord","percentage","Math","round","handleSubmit","e","preventDefault","isExactMatch","some","setTimeout","closeMatch","word","restartExercise","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","disabled","onClick","join","_c","$RefreshReg$"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/AntonymExercise.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface AntonymExerciseProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n}\n\nconst AntonymExercise: React.FC<AntonymExerciseProps> = ({\n  words,\n  onAnswer,\n}) => {\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [userInput, setUserInput] = useState(\"\");\n  const [feedback, setFeedback] = useState<\n    \"correct\" | \"incorrect\" | \"close\" | null\n  >(null);\n  const [feedbackMessage, setFeedbackMessage] = useState(\"\");\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionsAnswered, setQuestionsAnswered] = useState(0);\n  const [exerciseCompleted, setExerciseCompleted] = useState(false);\n\n  const currentWord = words[currentWordIndex];\n\n  // Function to normalize text for comparison\n  const normalizeText = (text: string): string => {\n    return text\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z\\s]/g, \"\");\n  };\n\n  // Function to check if input is close to any antonym\n  const findCloseMatch = (input: string, antonyms: string[]): string | null => {\n    const normalizedInput = normalizeText(input);\n\n    for (const antonym of antonyms) {\n      const normalizedAntonym = normalizeText(antonym);\n\n      // Check for partial matches or plurals\n      if (\n        normalizedAntonym.includes(normalizedInput) ||\n        normalizedInput.includes(normalizedAntonym)\n      ) {\n        return antonym;\n      }\n\n      // Check for common variations (e.g., \"start\" vs \"starting\")\n      if (\n        normalizedInput.endsWith(\"ing\") &&\n        normalizedAntonym === normalizedInput.slice(0, -3)\n      ) {\n        return antonym;\n      }\n      if (\n        normalizedAntonym.endsWith(\"ing\") &&\n        normalizedInput === normalizedAntonym.slice(0, -3)\n      ) {\n        return antonym;\n      }\n\n      // Check for plural forms\n      if (\n        normalizedInput.endsWith(\"s\") &&\n        normalizedAntonym === normalizedInput.slice(0, -1)\n      ) {\n        return antonym;\n      }\n      if (\n        normalizedAntonym.endsWith(\"s\") &&\n        normalizedInput === normalizedAntonym.slice(0, -1)\n      ) {\n        return antonym;\n      }\n    }\n\n    return null;\n  };\n\n  const skipWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex((prev) => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    }\n  };\n\n  const moveToNextWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex((prev) => prev + 1);\n      setUserInput(\"\");\n      setFeedback(null);\n      setFeedbackMessage(\"\");\n    } else {\n      // Exercise completed\n      setExerciseCompleted(true);\n      const percentage =\n        words.length > 0\n          ? Math.round((correctAnswers / words.length) * 100)\n          : 0;\n      setFeedback(\"correct\");\n      setFeedbackMessage(\n        `ðŸŽ‰ Exercise completed! Your score: ${correctAnswers}/${words.length} (${percentage}%)`\n      );\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!userInput.trim()) return;\n\n    const normalizedInput = normalizeText(userInput);\n\n    // Check for exact matches first\n    const isExactMatch = currentWord.antonyms.some(\n      (antonym) => normalizeText(antonym) === normalizedInput\n    );\n\n    if (isExactMatch) {\n      setFeedback(\"correct\");\n      setFeedbackMessage(\"Excellent! That's a perfect antonym!\");\n      setCorrectAnswers((prev) => prev + 1);\n      setQuestionsAnswered((prev) => prev + 1);\n      onAnswer(true);\n\n      // Auto-advance for correct answers\n      setTimeout(() => {\n        moveToNextWord();\n      }, 2000);\n    } else {\n      // Check for close matches\n      const closeMatch = findCloseMatch(userInput, currentWord.antonyms);\n\n      if (closeMatch) {\n        setFeedback(\"close\");\n        setFeedbackMessage(\n          `Very close! You wrote \"${userInput}\" - the exact form is \"${closeMatch}\"`\n        );\n        setCorrectAnswers((prev) => prev + 1);\n        setQuestionsAnswered((prev) => prev + 1);\n        onAnswer(true);\n\n        // Auto-advance for close answers\n        setTimeout(() => {\n          moveToNextWord();\n        }, 2000);\n      } else {\n        setFeedback(\"incorrect\");\n        setFeedbackMessage(\n          `Not quite right. Try thinking of words that mean the opposite of \"${currentWord.word}\"`\n        );\n        setQuestionsAnswered((prev) => prev + 1);\n        onAnswer(false);\n\n        // Do NOT auto-advance for incorrect answers - user must click \"Next Word\"\n      }\n    }\n  };\n\n  const restartExercise = () => {\n    setCurrentWordIndex(0);\n    setUserInput(\"\");\n    setFeedback(null);\n    setFeedbackMessage(\"\");\n    setCorrectAnswers(0);\n    setQuestionsAnswered(0);\n    setExerciseCompleted(false);\n  };\n\n  return (\n    <div className=\"syn-ant-container\">\n      <div className=\"word-progress\">\n        {exerciseCompleted\n          ? `Final Score: ${correctAnswers}`\n          : `Word ${currentWordIndex + 1} of ${\n              words.length\n            } | Score: ${correctAnswers}`}\n      </div>\n\n      <div className=\"exercise-content\">\n        <div className=\"exercise-left\">\n          {!exerciseCompleted && (\n            <>\n              <div className=\"word-row\">\n                <span className=\"word-label\">Word:</span>\n                <span className=\"word-value\">{currentWord.word}</span>\n              </div>\n\n              <form onSubmit={handleSubmit}>\n                <div className=\"word-row\">\n                  <span className=\"word-label\">Antonym:</span>\n                  <input\n                    type=\"text\"\n                    className={`input-field ${feedback || \"\"}`}\n                    value={userInput}\n                    onChange={(e) => setUserInput(e.target.value)}\n                    placeholder=\"Enter an antonym (opposite meaning)...\"\n                    disabled={feedback !== null}\n                  />\n                </div>\n\n                <div className=\"button-group\">\n                  <button\n                    type=\"submit\"\n                    className=\"game-btn\"\n                    disabled={!userInput.trim() || feedback !== null}\n                  >\n                    Check Answer\n                  </button>\n\n                  {feedback === null && (\n                    <button\n                      type=\"button\"\n                      className=\"skip-btn\"\n                      onClick={skipWord}\n                    >\n                      Skip Word\n                    </button>\n                  )}\n\n                  {feedback === \"incorrect\" && (\n                    <button\n                      type=\"button\"\n                      className=\"next-word-btn\"\n                      onClick={moveToNextWord}\n                    >\n                      Next Word\n                    </button>\n                  )}\n                </div>\n              </form>\n            </>\n          )}\n\n          {exerciseCompleted && (\n            <div className=\"completion-buttons\">\n              <button className=\"game-btn\" onClick={restartExercise}>\n                Try Again\n              </button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"exercise-right\">\n          {feedback && (\n            <div className={`feedback ${feedback}`}>\n              {feedbackMessage}\n              {feedback === \"incorrect\" && !exerciseCompleted && (\n                <div className=\"hint\">\n                  <strong>Hint:</strong> Some antonyms for \"{currentWord.word}\"\n                  are: {currentWord.antonyms.slice(0, 3).join(\", \")}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AntonymExercise;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}