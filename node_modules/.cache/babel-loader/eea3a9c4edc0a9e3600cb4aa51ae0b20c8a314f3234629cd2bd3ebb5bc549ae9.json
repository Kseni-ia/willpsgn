{"ast":null,"code":"import _objectSpread from\"/Users/kseniia/Desktop/WillPsGn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from\"react\";import\"./styles/Game.css\";import DefinitionMatch from\"./components/DefinitionMatch\";import SynonymExercise from\"./components/SynonymExercise\";import AntonymExercise from\"./components/AntonymExercise\";import MemoryGame from\"./components/MemoryGame\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const initialStats={correctAnswers:0,totalQuestions:0,currentStreak:0,bestStreak:0};const initialGameState={currentExercise:null,stats:initialStats,progress:0,selectedWords:[],matchedPairs:new Set()};// IELTS Vocabulary data from the screenshot\nconst vocabularyData=[{id:1,word:\"Chain reaction\",definition:\"A series of events, each of which causes the next\",synonyms:[\"Sequence\",\"Series\",\"Cascade\"],antonyms:[\"Isolation\",\"Single event\",\"Independence\",\"Separation\",\"Individual action\",\"Standalone\",\"Unconnected\"]},{id:2,word:\"Consequence\",definition:\"The results or effects of something\",synonyms:[\"Result\",\"Effect\",\"Outcome\"],antonyms:[\"Cause\",\"Origin\",\"Source\",\"Beginning\",\"Start\",\"Root\",\"Trigger\",\"Reason\"]},{id:3,word:\"Impact\",definition:\"A sudden and powerful effect on a situation, process, or person\",synonyms:[\"Effect\",\"Influence\",\"Force\"],antonyms:[\"Weakness\",\"Insignificance\",\"Neglect\",\"Powerlessness\",\"Ineffectiveness\",\"Gentleness\",\"Softness\"]},{id:4,word:\"Influence\",definition:\"To affect what people do or what happens in situations\",synonyms:[\"Affect\",\"Sway\",\"Impact\"],antonyms:[\"Independence\",\"Autonomy\",\"Resistance\",\"Immunity\",\"Freedom\",\"Self-reliance\"]},{id:5,word:\"Outcome\",definition:\"The situation that exists at the end of an activity or process\",synonyms:[\"Result\",\"End\",\"Conclusion\"],antonyms:[\"Beginning\",\"Start\",\"Cause\",\"Origin\",\"Input\",\"Commencement\",\"Introduction\"]},{id:6,word:\"Repercussion\",definition:\"Unpleasant things that happen as a result of an action or event\",synonyms:[\"Consequence\",\"Aftermath\",\"Backlash\"],antonyms:[\"Benefit\",\"Advantage\",\"Reward\",\"Blessing\",\"Positive outcome\",\"Good result\",\"Bonus\"]},{id:7,word:\"Affect\",definition:\"To influence or cause someone or something to change\",synonyms:[\"Influence\",\"Impact\",\"Alter\"],antonyms:[\"Ignore\",\"Preserve\",\"Maintain\",\"Leave alone\",\"Keep unchanged\",\"Neglect\",\"Disregard\"]},{id:8,word:\"Contribute\",definition:\"To be one of the causes of an event or situation\",synonyms:[\"Add\",\"Help\",\"Assist\"],antonyms:[\"Hinder\",\"Prevent\",\"Block\",\"Obstruct\",\"Impede\",\"Subtract\",\"Remove\",\"Withdraw\"]},{id:9,word:\"Determine\",definition:\"To cause something to be of a particular kind or nature\",synonyms:[\"Decide\",\"Establish\",\"Fix\"],antonyms:[\"Ignore\",\"Neglect\",\"Randomize\",\"Confuse\",\"Uncertain\",\"Undecided\",\"Flexible\"]},{id:10,word:\"Generate\",definition:\"To cause something to begin and develop\",synonyms:[\"Create\",\"Produce\",\"Cause\"],antonyms:[\"Destroy\",\"Stop\",\"End\",\"Eliminate\",\"Remove\",\"Prevent\",\"Block\",\"Terminate\"]},{id:11,word:\"Induce\",definition:\"To cause a state or condition\",synonyms:[\"Cause\",\"Bring about\",\"Lead to\"],antonyms:[\"Prevent\",\"Stop\",\"Block\",\"Discourage\",\"Deter\",\"Inhibit\",\"Suppress\"]},{id:12,word:\"Provoke\",definition:\"To cause a reaction or response\",synonyms:[\"Trigger\",\"Cause\",\"Arouse\"],antonyms:[\"Calm\",\"Soothe\",\"Prevent\",\"Pacify\",\"Appease\",\"Comfort\",\"Relax\"]},{id:13,word:\"Result\",definition:\"To cause a particular situation or event to happen\",synonyms:[\"Lead to\",\"Cause\",\"End in\"],antonyms:[\"Cause\",\"Beginning\",\"Start\",\"Origin\",\"Unfinished\",\"Incomplete\",\"Ongoing\",\"Process\",\"Input\"]},{id:14,word:\"Stem\",definition:\"To originate or be caused by something\",synonyms:[\"Arise\",\"Originate\",\"Spring\"],antonyms:[\"End\",\"Finish\",\"Conclude\",\"Terminate\",\"Result\",\"Lead to\",\"Cause\"]},{id:15,word:\"Trigger\",definition:\"To cause an event or situation to begin\",synonyms:[\"Cause\",\"Start\",\"Activate\"],antonyms:[\"Stop\",\"Prevent\",\"End\",\"Finish\",\"Halt\",\"Block\",\"Inhibit\"]}];const App=()=>{const[gameState,setGameState]=useState(initialGameState);const[exerciseStartTime,setExerciseStartTime]=useState(0);const[currentScore,setCurrentScore]=useState(0);const[currentTime,setCurrentTime]=useState(\"00:00\");const[mistakes,setMistakes]=useState(0);const[gameOver,setGameOver]=useState(false);// Timer effect to update time every second\nuseEffect(()=>{let interval;if(gameState.currentExercise&&exerciseStartTime&&!gameOver){interval=setInterval(()=>{const elapsed=Math.floor((Date.now()-exerciseStartTime)/1000);const minutes=Math.floor(elapsed/60);const seconds=elapsed%60;setCurrentTime(\"\".concat(minutes.toString().padStart(2,\"0\"),\":\").concat(seconds.toString().padStart(2,\"0\")));},1000);}return()=>{if(interval)clearInterval(interval);};},[gameState.currentExercise,exerciseStartTime,gameOver]);const startExercise=type=>{// Shuffle words for variety - different starting point each time\nconst shuffledWords=[...vocabularyData].sort(()=>Math.random()-0.5);setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{currentExercise:type,progress:0,selectedWords:type===\"memory\"?shuffledWords.slice(0,6):shuffledWords,matchedPairs:new Set()}));setExerciseStartTime(Date.now());setCurrentScore(0);setCurrentTime(\"00:00\");setMistakes(0);setGameOver(false);};const goBackToMenu=()=>{setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{currentExercise:null,progress:0,selectedWords:[],matchedPairs:new Set()}));setExerciseStartTime(0);setCurrentScore(0);setCurrentTime(\"00:00\");setMistakes(0);setGameOver(false);};const restartCurrentExercise=()=>{if(gameState.currentExercise){startExercise(gameState.currentExercise);}};const updateStats=isCorrect=>{if(gameOver)return;// Don't update if game is over\n// Handle mistake counting first, outside of setGameState\nif(!isCorrect&&gameState.currentExercise===\"definition\"){setMistakes(prev=>{const newMistakes=prev+1;if(newMistakes>=4){setGameOver(true);}return newMistakes;});}// Update game stats\nsetGameState(prev=>{const newStats=_objectSpread({},prev.stats);newStats.totalQuestions++;if(isCorrect){newStats.correctAnswers++;newStats.currentStreak++;newStats.bestStreak=Math.max(newStats.bestStreak,newStats.currentStreak);setCurrentScore(prev=>prev+1);}else{newStats.currentStreak=0;// Mistake counting is now handled above, outside this callback\n}return _objectSpread(_objectSpread({},prev),{},{stats:newStats});});};// Calculate progress percentage based on exercise type\nconst getProgressPercentage=()=>{if(!gameState.currentExercise||gameState.selectedWords.length===0){return\"0%\";}switch(gameState.currentExercise){case\"memory\":// For memory game: matched pairs / total pairs\nconst totalPairs=gameState.selectedWords.length;const matchedPairs=gameState.matchedPairs.size;return\"\".concat(Math.round(matchedPairs/totalPairs*100),\"%\");case\"synonym\":case\"antonym\":// For these exercises: correct answers / total words\nconst totalWords=gameState.selectedWords.length;return\"\".concat(Math.round(currentScore/totalWords*100),\"%\");case\"definition\":// For definition match: use current score (which reflects actual matches)\nreturn\"\".concat(Math.round(currentScore/gameState.selectedWords.length*100),\"%\");default:return\"0%\";}};// Add function to update progress for synonym/antonym exercises\nconst updateProgress=currentIndex=>{setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{progress:currentIndex+1}));};const renderExercise=()=>{if(gameOver){return/*#__PURE__*/_jsx(\"div\",{className:\"game-over-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"game-over-animation\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Game Over!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"You made 4 mistakes. Don't worry, practice makes perfect!\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Your score: \",currentScore,\"/\",gameState.selectedWords.length]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-over-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"game-btn\",onClick:restartCurrentExercise,children:\"Try Again\"}),/*#__PURE__*/_jsx(\"button\",{className:\"back-btn\",onClick:goBackToMenu,children:\"Back to Menu\"})]})]})});}switch(gameState.currentExercise){case\"definition\":return/*#__PURE__*/_jsx(DefinitionMatch,{words:gameState.selectedWords,onAnswer:updateStats});case\"synonym\":return/*#__PURE__*/_jsx(SynonymExercise,{words:gameState.selectedWords,onAnswer:updateStats,onProgress:updateProgress});case\"antonym\":return/*#__PURE__*/_jsx(AntonymExercise,{words:gameState.selectedWords,onAnswer:updateStats,onProgress:updateProgress});case\"memory\":return/*#__PURE__*/_jsx(MemoryGame,{words:gameState.selectedWords,onAnswer:updateStats});default:return null;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Vocabulary Master Game\"}),/*#__PURE__*/_jsx(\"div\",{className:\"stats\",children:!gameState.currentExercise?/*#__PURE__*/// Welcome screen - show welcome info\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:\"Welcome\"}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"IELTS Practice\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:\"15\"}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Vocabulary Words\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:\"Ready?\"}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Let's Begin\"})]})]}):/*#__PURE__*/// During exercise - show scores and timer\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:currentScore}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Score\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:currentTime}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Time\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:getProgressPercentage()}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Progress\"})]})]})})]}),!gameState.currentExercise?/*#__PURE__*/// Welcome Screen\n_jsx(\"div\",{className:\"welcome-screen\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"welcome-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to IELTS Vocabulary Practice!\"}),/*#__PURE__*/_jsx(\"p\",{className:\"welcome-description\",children:\"Master 15 essential IELTS vocabulary words through 4 interactive exercises:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-preview\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"preview-item\",onClick:()=>startExercise(\"definition\"),children:[/*#__PURE__*/_jsx(\"span\",{className:\"preview-icon\",children:\"\\uD83D\\uDCDA\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Definition Match\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"preview-item\",onClick:()=>startExercise(\"synonym\"),children:[/*#__PURE__*/_jsx(\"span\",{className:\"preview-icon\",children:\"\\uD83D\\uDD17\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Synonym Exercise\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"preview-item\",onClick:()=>startExercise(\"antonym\"),children:[/*#__PURE__*/_jsx(\"span\",{className:\"preview-icon\",children:\"\\u26A1\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Antonym Exercise\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"preview-item\",onClick:()=>startExercise(\"memory\"),children:[/*#__PURE__*/_jsx(\"span\",{className:\"preview-icon\",children:\"\\uD83E\\uDDE0\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Memory Game\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"welcome-info\",children:/*#__PURE__*/_jsx(\"p\",{className:\"info-highlight\",children:\"\\uD83D\\uDCDA Topic 14: Cause and Effect Vocabulary\"})})]})}):/*#__PURE__*/_jsxs(\"div\",{className:\"exercise active\",children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"exercise-title\",children:[gameState.currentExercise.charAt(0).toUpperCase()+gameState.currentExercise.slice(1),\" \",\"Exercise\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:\"\".concat(gameState.progress/gameState.selectedWords.length*100,\"%\")}})}),!gameOver&&gameState.currentExercise===\"definition\"&&/*#__PURE__*/_jsx(\"div\",{className:\"mistake-counter\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"mistakes \".concat(mistakes>=3?\"danger\":\"\"),children:[\"Mistakes: \",mistakes,\"/4\"]})}),renderExercise(),!gameOver&&/*#__PURE__*/_jsx(\"button\",{className:\"back-btn\",onClick:goBackToMenu,children:\"Back to Menu\"})]})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","DefinitionMatch","SynonymExercise","AntonymExercise","MemoryGame","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","initialStats","correctAnswers","totalQuestions","currentStreak","bestStreak","initialGameState","currentExercise","stats","progress","selectedWords","matchedPairs","Set","vocabularyData","id","word","definition","synonyms","antonyms","App","gameState","setGameState","exerciseStartTime","setExerciseStartTime","currentScore","setCurrentScore","currentTime","setCurrentTime","mistakes","setMistakes","gameOver","setGameOver","interval","setInterval","elapsed","Math","floor","Date","now","minutes","seconds","concat","toString","padStart","clearInterval","startExercise","type","shuffledWords","sort","random","prev","_objectSpread","slice","goBackToMenu","restartCurrentExercise","updateStats","isCorrect","newMistakes","newStats","max","getProgressPercentage","length","totalPairs","size","round","totalWords","updateProgress","currentIndex","renderExercise","className","children","onClick","words","onAnswer","onProgress","charAt","toUpperCase","style","width"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles/Game.css\";\nimport { GameState, Word, GameStats, ExerciseType } from \"./types/game\";\nimport DefinitionMatch from \"./components/DefinitionMatch\";\nimport SynonymExercise from \"./components/SynonymExercise\";\nimport AntonymExercise from \"./components/AntonymExercise\";\nimport MemoryGame from \"./components/MemoryGame\";\n\nconst initialStats: GameStats = {\n  correctAnswers: 0,\n  totalQuestions: 0,\n  currentStreak: 0,\n  bestStreak: 0,\n};\n\nconst initialGameState: GameState = {\n  currentExercise: null,\n  stats: initialStats,\n  progress: 0,\n  selectedWords: [],\n  matchedPairs: new Set(),\n};\n\n// IELTS Vocabulary data from the screenshot\nconst vocabularyData: Word[] = [\n  {\n    id: 1,\n    word: \"Chain reaction\",\n    definition: \"A series of events, each of which causes the next\",\n    synonyms: [\"Sequence\", \"Series\", \"Cascade\"],\n    antonyms: [\n      \"Isolation\",\n      \"Single event\",\n      \"Independence\",\n      \"Separation\",\n      \"Individual action\",\n      \"Standalone\",\n      \"Unconnected\",\n    ],\n  },\n  {\n    id: 2,\n    word: \"Consequence\",\n    definition: \"The results or effects of something\",\n    synonyms: [\"Result\", \"Effect\", \"Outcome\"],\n    antonyms: [\n      \"Cause\",\n      \"Origin\",\n      \"Source\",\n      \"Beginning\",\n      \"Start\",\n      \"Root\",\n      \"Trigger\",\n      \"Reason\",\n    ],\n  },\n  {\n    id: 3,\n    word: \"Impact\",\n    definition:\n      \"A sudden and powerful effect on a situation, process, or person\",\n    synonyms: [\"Effect\", \"Influence\", \"Force\"],\n    antonyms: [\n      \"Weakness\",\n      \"Insignificance\",\n      \"Neglect\",\n      \"Powerlessness\",\n      \"Ineffectiveness\",\n      \"Gentleness\",\n      \"Softness\",\n    ],\n  },\n  {\n    id: 4,\n    word: \"Influence\",\n    definition: \"To affect what people do or what happens in situations\",\n    synonyms: [\"Affect\", \"Sway\", \"Impact\"],\n    antonyms: [\n      \"Independence\",\n      \"Autonomy\",\n      \"Resistance\",\n      \"Immunity\",\n      \"Freedom\",\n      \"Self-reliance\",\n    ],\n  },\n  {\n    id: 5,\n    word: \"Outcome\",\n    definition:\n      \"The situation that exists at the end of an activity or process\",\n    synonyms: [\"Result\", \"End\", \"Conclusion\"],\n    antonyms: [\n      \"Beginning\",\n      \"Start\",\n      \"Cause\",\n      \"Origin\",\n      \"Input\",\n      \"Commencement\",\n      \"Introduction\",\n    ],\n  },\n  {\n    id: 6,\n    word: \"Repercussion\",\n    definition:\n      \"Unpleasant things that happen as a result of an action or event\",\n    synonyms: [\"Consequence\", \"Aftermath\", \"Backlash\"],\n    antonyms: [\n      \"Benefit\",\n      \"Advantage\",\n      \"Reward\",\n      \"Blessing\",\n      \"Positive outcome\",\n      \"Good result\",\n      \"Bonus\",\n    ],\n  },\n  {\n    id: 7,\n    word: \"Affect\",\n    definition: \"To influence or cause someone or something to change\",\n    synonyms: [\"Influence\", \"Impact\", \"Alter\"],\n    antonyms: [\n      \"Ignore\",\n      \"Preserve\",\n      \"Maintain\",\n      \"Leave alone\",\n      \"Keep unchanged\",\n      \"Neglect\",\n      \"Disregard\",\n    ],\n  },\n  {\n    id: 8,\n    word: \"Contribute\",\n    definition: \"To be one of the causes of an event or situation\",\n    synonyms: [\"Add\", \"Help\", \"Assist\"],\n    antonyms: [\n      \"Hinder\",\n      \"Prevent\",\n      \"Block\",\n      \"Obstruct\",\n      \"Impede\",\n      \"Subtract\",\n      \"Remove\",\n      \"Withdraw\",\n    ],\n  },\n  {\n    id: 9,\n    word: \"Determine\",\n    definition: \"To cause something to be of a particular kind or nature\",\n    synonyms: [\"Decide\", \"Establish\", \"Fix\"],\n    antonyms: [\n      \"Ignore\",\n      \"Neglect\",\n      \"Randomize\",\n      \"Confuse\",\n      \"Uncertain\",\n      \"Undecided\",\n      \"Flexible\",\n    ],\n  },\n  {\n    id: 10,\n    word: \"Generate\",\n    definition: \"To cause something to begin and develop\",\n    synonyms: [\"Create\", \"Produce\", \"Cause\"],\n    antonyms: [\n      \"Destroy\",\n      \"Stop\",\n      \"End\",\n      \"Eliminate\",\n      \"Remove\",\n      \"Prevent\",\n      \"Block\",\n      \"Terminate\",\n    ],\n  },\n  {\n    id: 11,\n    word: \"Induce\",\n    definition: \"To cause a state or condition\",\n    synonyms: [\"Cause\", \"Bring about\", \"Lead to\"],\n    antonyms: [\n      \"Prevent\",\n      \"Stop\",\n      \"Block\",\n      \"Discourage\",\n      \"Deter\",\n      \"Inhibit\",\n      \"Suppress\",\n    ],\n  },\n  {\n    id: 12,\n    word: \"Provoke\",\n    definition: \"To cause a reaction or response\",\n    synonyms: [\"Trigger\", \"Cause\", \"Arouse\"],\n    antonyms: [\n      \"Calm\",\n      \"Soothe\",\n      \"Prevent\",\n      \"Pacify\",\n      \"Appease\",\n      \"Comfort\",\n      \"Relax\",\n    ],\n  },\n  {\n    id: 13,\n    word: \"Result\",\n    definition: \"To cause a particular situation or event to happen\",\n    synonyms: [\"Lead to\", \"Cause\", \"End in\"],\n    antonyms: [\n      \"Cause\",\n      \"Beginning\",\n      \"Start\",\n      \"Origin\",\n      \"Unfinished\",\n      \"Incomplete\",\n      \"Ongoing\",\n      \"Process\",\n      \"Input\",\n    ],\n  },\n  {\n    id: 14,\n    word: \"Stem\",\n    definition: \"To originate or be caused by something\",\n    synonyms: [\"Arise\", \"Originate\", \"Spring\"],\n    antonyms: [\n      \"End\",\n      \"Finish\",\n      \"Conclude\",\n      \"Terminate\",\n      \"Result\",\n      \"Lead to\",\n      \"Cause\",\n    ],\n  },\n  {\n    id: 15,\n    word: \"Trigger\",\n    definition: \"To cause an event or situation to begin\",\n    synonyms: [\"Cause\", \"Start\", \"Activate\"],\n    antonyms: [\"Stop\", \"Prevent\", \"End\", \"Finish\", \"Halt\", \"Block\", \"Inhibit\"],\n  },\n];\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState<GameState>(initialGameState);\n  const [exerciseStartTime, setExerciseStartTime] = useState<number>(0);\n  const [currentScore, setCurrentScore] = useState<number>(0);\n  const [currentTime, setCurrentTime] = useState<string>(\"00:00\");\n  const [mistakes, setMistakes] = useState<number>(0);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n\n  // Timer effect to update time every second\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (gameState.currentExercise && exerciseStartTime && !gameOver) {\n      interval = setInterval(() => {\n        const elapsed = Math.floor((Date.now() - exerciseStartTime) / 1000);\n        const minutes = Math.floor(elapsed / 60);\n        const seconds = elapsed % 60;\n        setCurrentTime(\n          `${minutes.toString().padStart(2, \"0\")}:${seconds\n            .toString()\n            .padStart(2, \"0\")}`\n        );\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [gameState.currentExercise, exerciseStartTime, gameOver]);\n\n  const startExercise = (type: ExerciseType) => {\n    // Shuffle words for variety - different starting point each time\n    const shuffledWords = [...vocabularyData].sort(() => Math.random() - 0.5);\n\n    setGameState((prev) => ({\n      ...prev,\n      currentExercise: type,\n      progress: 0,\n      selectedWords:\n        type === \"memory\" ? shuffledWords.slice(0, 6) : shuffledWords,\n      matchedPairs: new Set(),\n    }));\n    setExerciseStartTime(Date.now());\n    setCurrentScore(0);\n    setCurrentTime(\"00:00\");\n    setMistakes(0);\n    setGameOver(false);\n  };\n\n  const goBackToMenu = () => {\n    setGameState((prev) => ({\n      ...prev,\n      currentExercise: null,\n      progress: 0,\n      selectedWords: [],\n      matchedPairs: new Set(),\n    }));\n    setExerciseStartTime(0);\n    setCurrentScore(0);\n    setCurrentTime(\"00:00\");\n    setMistakes(0);\n    setGameOver(false);\n  };\n\n  const restartCurrentExercise = () => {\n    if (gameState.currentExercise) {\n      startExercise(gameState.currentExercise);\n    }\n  };\n\n  const updateStats = (isCorrect: boolean) => {\n    if (gameOver) return; // Don't update if game is over\n\n    // Handle mistake counting first, outside of setGameState\n    if (!isCorrect && gameState.currentExercise === \"definition\") {\n      setMistakes((prev) => {\n        const newMistakes = prev + 1;\n        if (newMistakes >= 4) {\n          setGameOver(true);\n        }\n        return newMistakes;\n      });\n    }\n\n    // Update game stats\n    setGameState((prev) => {\n      const newStats = { ...prev.stats };\n      newStats.totalQuestions++;\n\n      if (isCorrect) {\n        newStats.correctAnswers++;\n        newStats.currentStreak++;\n        newStats.bestStreak = Math.max(\n          newStats.bestStreak,\n          newStats.currentStreak\n        );\n        setCurrentScore((prev) => prev + 1);\n      } else {\n        newStats.currentStreak = 0;\n        // Mistake counting is now handled above, outside this callback\n      }\n\n      return {\n        ...prev,\n        stats: newStats,\n      };\n    });\n  };\n\n  // Calculate progress percentage based on exercise type\n  const getProgressPercentage = () => {\n    if (!gameState.currentExercise || gameState.selectedWords.length === 0) {\n      return \"0%\";\n    }\n\n    switch (gameState.currentExercise) {\n      case \"memory\":\n        // For memory game: matched pairs / total pairs\n        const totalPairs = gameState.selectedWords.length;\n        const matchedPairs = gameState.matchedPairs.size;\n        return `${Math.round((matchedPairs / totalPairs) * 100)}%`;\n\n      case \"synonym\":\n      case \"antonym\":\n        // For these exercises: correct answers / total words\n        const totalWords = gameState.selectedWords.length;\n        return `${Math.round((currentScore / totalWords) * 100)}%`;\n\n      case \"definition\":\n        // For definition match: use current score (which reflects actual matches)\n        return `${Math.round(\n          (currentScore / gameState.selectedWords.length) * 100\n        )}%`;\n\n      default:\n        return \"0%\";\n    }\n  };\n\n  // Add function to update progress for synonym/antonym exercises\n  const updateProgress = (currentIndex: number) => {\n    setGameState((prev) => ({\n      ...prev,\n      progress: currentIndex + 1,\n    }));\n  };\n\n  const renderExercise = () => {\n    if (gameOver) {\n      return (\n        <div className=\"game-over-container\">\n          <div className=\"game-over-animation\">\n            <h2>Game Over!</h2>\n            <p>You made 4 mistakes. Don't worry, practice makes perfect!</p>\n            <p>\n              Your score: {currentScore}/{gameState.selectedWords.length}\n            </p>\n            <div className=\"game-over-buttons\">\n              <button className=\"game-btn\" onClick={restartCurrentExercise}>\n                Try Again\n              </button>\n              <button className=\"back-btn\" onClick={goBackToMenu}>\n                Back to Menu\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    switch (gameState.currentExercise) {\n      case \"definition\":\n        return (\n          <DefinitionMatch\n            words={gameState.selectedWords}\n            onAnswer={updateStats}\n          />\n        );\n      case \"synonym\":\n        return (\n          <SynonymExercise\n            words={gameState.selectedWords}\n            onAnswer={updateStats}\n            onProgress={updateProgress}\n          />\n        );\n      case \"antonym\":\n        return (\n          <AntonymExercise\n            words={gameState.selectedWords}\n            onAnswer={updateStats}\n            onProgress={updateProgress}\n          />\n        );\n      case \"memory\":\n        return (\n          <MemoryGame words={gameState.selectedWords} onAnswer={updateStats} />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"header\">\n        <h1 className=\"title\">Vocabulary Master Game</h1>\n        <div className=\"stats\">\n          {!gameState.currentExercise ? (\n            // Welcome screen - show welcome info\n            <>\n              <div className=\"stat\">\n                <div className=\"stat-value\">Welcome</div>\n                <div className=\"stat-label\">IELTS Practice</div>\n              </div>\n              <div className=\"stat\">\n                <div className=\"stat-value\">15</div>\n                <div className=\"stat-label\">Vocabulary Words</div>\n              </div>\n              <div className=\"stat\">\n                <div className=\"stat-value\">Ready?</div>\n                <div className=\"stat-label\">Let's Begin</div>\n              </div>\n            </>\n          ) : (\n            // During exercise - show scores and timer\n            <>\n              <div className=\"stat\">\n                <div className=\"stat-value\">{currentScore}</div>\n                <div className=\"stat-label\">Score</div>\n              </div>\n              <div className=\"stat\">\n                <div className=\"stat-value\">{currentTime}</div>\n                <div className=\"stat-label\">Time</div>\n              </div>\n              <div className=\"stat\">\n                <div className=\"stat-value\">{getProgressPercentage()}</div>\n                <div className=\"stat-label\">Progress</div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {!gameState.currentExercise ? (\n        // Welcome Screen\n        <div className=\"welcome-screen\">\n          <div className=\"welcome-content\">\n            <h2>Welcome to IELTS Vocabulary Practice!</h2>\n            <p className=\"welcome-description\">\n              Master 15 essential IELTS vocabulary words through 4 interactive\n              exercises:\n            </p>\n            <div className=\"exercise-preview\">\n              <div\n                className=\"preview-item\"\n                onClick={() => startExercise(\"definition\")}\n              >\n                <span className=\"preview-icon\">📚</span>\n                <span>Definition Match</span>\n              </div>\n              <div\n                className=\"preview-item\"\n                onClick={() => startExercise(\"synonym\")}\n              >\n                <span className=\"preview-icon\">🔗</span>\n                <span>Synonym Exercise</span>\n              </div>\n              <div\n                className=\"preview-item\"\n                onClick={() => startExercise(\"antonym\")}\n              >\n                <span className=\"preview-icon\">⚡</span>\n                <span>Antonym Exercise</span>\n              </div>\n              <div\n                className=\"preview-item\"\n                onClick={() => startExercise(\"memory\")}\n              >\n                <span className=\"preview-icon\">🧠</span>\n                <span>Memory Game</span>\n              </div>\n            </div>\n            <div className=\"welcome-info\">\n              <p className=\"info-highlight\">\n                📚 Topic 14: Cause and Effect Vocabulary\n              </p>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"exercise active\">\n          <h2 className=\"exercise-title\">\n            {gameState.currentExercise.charAt(0).toUpperCase() +\n              gameState.currentExercise.slice(1)}{\" \"}\n            Exercise\n          </h2>\n          <div className=\"progress-bar\">\n            <div\n              className=\"progress-fill\"\n              style={{\n                width: `${\n                  (gameState.progress / gameState.selectedWords.length) * 100\n                }%`,\n              }}\n            />\n          </div>\n          {!gameOver && gameState.currentExercise === \"definition\" && (\n            <div className=\"mistake-counter\">\n              <span className={`mistakes ${mistakes >= 3 ? \"danger\" : \"\"}`}>\n                Mistakes: {mistakes}/4\n              </span>\n            </div>\n          )}\n          {renderExercise()}\n          {!gameOver && (\n            <button className=\"back-btn\" onClick={goBackToMenu}>\n              Back to Menu\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}