{"ast":null,"code":"import _objectSpread from\"/Users/kseniia/Desktop/WillPsGn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MemoryGame=_ref=>{let{words,onAnswer}=_ref;const[cards,setCards]=useState([]);const[flippedCards,setFlippedCards]=useState([]);const[gameStarted,setGameStarted]=useState(false);const[gameCompleted,setGameCompleted]=useState(false);// Check if game is completed\nuseEffect(()=>{if(cards.length>0&&cards.every(card=>card.isMatched)){setGameCompleted(true);}},[cards]);useEffect(()=>{// Create cards from words and their synonyms\nconst newCards=[];words.forEach(word=>{// Add the vocabulary word\nnewCards.push({id:word.id,content:word.word,type:\"word\",isFlipped:false,isMatched:false});// Add a random synonym for each word\nconst randomSynonym=word.synonyms[Math.floor(Math.random()*word.synonyms.length)];newCards.push({id:word.id,content:randomSynonym,type:\"synonym\",isFlipped:false,isMatched:false});});// Shuffle the cards\nsetCards(newCards.sort(()=>Math.random()-0.5));// Reset game state\nsetGameStarted(false);setGameCompleted(false);setFlippedCards([]);},[words]);const handleCardClick=index=>{// Start the game on first click\nif(!gameStarted){setGameStarted(true);}if(flippedCards.length===2||cards[index].isMatched||flippedCards.includes(index)){return;}const newFlippedCards=[...flippedCards,index];setFlippedCards(newFlippedCards);// Update card flip state\nsetCards(prevCards=>{const newCards=[...prevCards];newCards[index]=_objectSpread(_objectSpread({},newCards[index]),{},{isFlipped:true});return newCards;});// Check for match if two cards are flipped\nif(newFlippedCards.length===2){const[firstIndex,secondIndex]=newFlippedCards;const firstCard=cards[firstIndex];const secondCard=cards[secondIndex];setTimeout(()=>{if(firstCard.id===secondCard.id){// Match found - keep cards flipped and mark as matched\nonAnswer(true);setCards(prevCards=>{const newCards=[...prevCards];newCards[firstIndex]=_objectSpread(_objectSpread({},newCards[firstIndex]),{},{isMatched:true,isFlipped:true});newCards[secondIndex]=_objectSpread(_objectSpread({},newCards[secondIndex]),{},{isMatched:true,isFlipped:true});return newCards;});}else{// No match - flip cards back\nonAnswer(false);setCards(prevCards=>{const newCards=[...prevCards];newCards[firstIndex]=_objectSpread(_objectSpread({},newCards[firstIndex]),{},{isFlipped:false});newCards[secondIndex]=_objectSpread(_objectSpread({},newCards[secondIndex]),{},{isFlipped:false});return newCards;});}setFlippedCards([]);},800);}};const restartGame=()=>{// Shuffle cards again\nsetCards(prevCards=>{const resetCards=prevCards.map(card=>_objectSpread(_objectSpread({},card),{},{isFlipped:false,isMatched:false}));return resetCards.sort(()=>Math.random()-0.5);});setGameStarted(false);setGameCompleted(false);setFlippedCards([]);};return/*#__PURE__*/_jsxs(\"div\",{className:\"memory-game\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"game-header\",children:[gameCompleted&&/*#__PURE__*/_jsxs(\"div\",{className:\"game-completed\",children:[\"\\uD83C\\uDF89 Game Completed! Great job matching all pairs!\",/*#__PURE__*/_jsx(\"button\",{className:\"restart-btn\",onClick:restartGame,children:\"Play Again\"})]}),!gameStarted&&!gameCompleted&&/*#__PURE__*/_jsx(\"div\",{className:\"game-instruction\",children:\"Click any card to start!\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"cards-grid\",children:cards.map((card,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"card \".concat(card.isFlipped?\"flipped\":\"\",\" \").concat(card.isMatched?\"matched\":\"\",\" \").concat(card.type===\"word\"?\"word-card\":\"synonym-card\"),onClick:()=>handleCardClick(index),children:/*#__PURE__*/_jsxs(\"div\",{className:\"card-inner\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"card-front\",children:\"?\"}),/*#__PURE__*/_jsx(\"div\",{className:\"card-back\",children:card.content})]})},\"\".concat(card.type,\"-\").concat(index)))})]});};export default MemoryGame;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","MemoryGame","_ref","words","onAnswer","cards","setCards","flippedCards","setFlippedCards","gameStarted","setGameStarted","gameCompleted","setGameCompleted","length","every","card","isMatched","newCards","forEach","word","push","id","content","type","isFlipped","randomSynonym","synonyms","Math","floor","random","sort","handleCardClick","index","includes","newFlippedCards","prevCards","_objectSpread","firstIndex","secondIndex","firstCard","secondCard","setTimeout","restartGame","resetCards","map","className","children","onClick","concat"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/MemoryGame.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface MemoryGameProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n}\n\ninterface Card {\n  id: number;\n  content: string;\n  type: \"word\" | \"synonym\";\n  isFlipped: boolean;\n  isMatched: boolean;\n}\n\nconst MemoryGame: React.FC<MemoryGameProps> = ({ words, onAnswer }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n\n  // Check if game is completed\n  useEffect(() => {\n    if (cards.length > 0 && cards.every((card) => card.isMatched)) {\n      setGameCompleted(true);\n    }\n  }, [cards]);\n\n  useEffect(() => {\n    // Create cards from words and their synonyms\n    const newCards: Card[] = [];\n\n    words.forEach((word) => {\n      // Add the vocabulary word\n      newCards.push({\n        id: word.id,\n        content: word.word,\n        type: \"word\",\n        isFlipped: false,\n        isMatched: false,\n      });\n\n      // Add a random synonym for each word\n      const randomSynonym =\n        word.synonyms[Math.floor(Math.random() * word.synonyms.length)];\n      newCards.push({\n        id: word.id,\n        content: randomSynonym,\n        type: \"synonym\",\n        isFlipped: false,\n        isMatched: false,\n      });\n    });\n\n    // Shuffle the cards\n    setCards(newCards.sort(() => Math.random() - 0.5));\n\n    // Reset game state\n    setGameStarted(false);\n    setGameCompleted(false);\n    setFlippedCards([]);\n  }, [words]);\n\n  const handleCardClick = (index: number) => {\n    // Start the game on first click\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n\n    if (\n      flippedCards.length === 2 ||\n      cards[index].isMatched ||\n      flippedCards.includes(index)\n    ) {\n      return;\n    }\n\n    const newFlippedCards = [...flippedCards, index];\n    setFlippedCards(newFlippedCards);\n\n    // Update card flip state\n    setCards((prevCards) => {\n      const newCards = [...prevCards];\n      newCards[index] = { ...newCards[index], isFlipped: true };\n      return newCards;\n    });\n\n    // Check for match if two cards are flipped\n    if (newFlippedCards.length === 2) {\n      const [firstIndex, secondIndex] = newFlippedCards;\n      const firstCard = cards[firstIndex];\n      const secondCard = cards[secondIndex];\n\n      setTimeout(() => {\n        if (firstCard.id === secondCard.id) {\n          // Match found - keep cards flipped and mark as matched\n          onAnswer(true);\n\n          setCards((prevCards) => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = {\n              ...newCards[firstIndex],\n              isMatched: true,\n              isFlipped: true,\n            };\n            newCards[secondIndex] = {\n              ...newCards[secondIndex],\n              isMatched: true,\n              isFlipped: true,\n            };\n            return newCards;\n          });\n        } else {\n          // No match - flip cards back\n          onAnswer(false);\n          setCards((prevCards) => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = {\n              ...newCards[firstIndex],\n              isFlipped: false,\n            };\n            newCards[secondIndex] = {\n              ...newCards[secondIndex],\n              isFlipped: false,\n            };\n            return newCards;\n          });\n        }\n        setFlippedCards([]);\n      }, 800);\n    }\n  };\n\n  const restartGame = () => {\n    // Shuffle cards again\n    setCards((prevCards) => {\n      const resetCards = prevCards.map((card) => ({\n        ...card,\n        isFlipped: false,\n        isMatched: false,\n      }));\n      return resetCards.sort(() => Math.random() - 0.5);\n    });\n\n    setGameStarted(false);\n    setGameCompleted(false);\n    setFlippedCards([]);\n  };\n\n  return (\n    <div className=\"memory-game\">\n      <div className=\"game-header\">\n        {gameCompleted && (\n          <div className=\"game-completed\">\n            ðŸŽ‰ Game Completed! Great job matching all pairs!\n            <button className=\"restart-btn\" onClick={restartGame}>\n              Play Again\n            </button>\n          </div>\n        )}\n\n        {!gameStarted && !gameCompleted && (\n          <div className=\"game-instruction\">Click any card to start!</div>\n        )}\n      </div>\n\n      <div className=\"cards-grid\">\n        {cards.map((card, index) => (\n          <div\n            key={`${card.type}-${index}`}\n            className={`card ${card.isFlipped ? \"flipped\" : \"\"} ${\n              card.isMatched ? \"matched\" : \"\"\n            } ${card.type === \"word\" ? \"word-card\" : \"synonym-card\"}`}\n            onClick={() => handleCardClick(index)}\n          >\n            <div className=\"card-inner\">\n              <div className=\"card-front\">?</div>\n              <div className=\"card-back\">{card.content}</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}