{"ast":null,"code":"var _jsxFileName = \"/Users/kseniia/Desktop/WillPsGn/src/components/DefinitionMatch.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DefinitionMatch = ({\n  words,\n  onAnswer\n}) => {\n  _s();\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [selectedDefinition, setSelectedDefinition] = useState(null);\n  const [matchedPairs, setMatchedPairs] = useState(new Set());\n  const [shuffledDefinitions, setShuffledDefinitions] = useState([]);\n  const [animatingMatch, setAnimatingMatch] = useState(null);\n  useEffect(() => {\n    // Shuffle definitions when component mounts or words change\n    const definitions = words.map(word => word.definition);\n    setShuffledDefinitions([...definitions].sort(() => Math.random() - 0.5));\n  }, [words]);\n  const handleWordClick = word => {\n    if (matchedPairs.has(word.id) || animatingMatch) return;\n    setSelectedWord(word);\n    setSelectedDefinition(null); // Clear any selected definition\n  };\n  const handleDefinitionClick = definition => {\n    if (animatingMatch) return; // Prevent clicks during animation\n\n    if (!selectedWord) {\n      // If no word is selected, just select this definition\n      setSelectedDefinition(definition);\n      return;\n    }\n    const isCorrect = selectedWord.definition === definition;\n    if (isCorrect) {\n      // Start connection animation\n      setAnimatingMatch({\n        wordId: selectedWord.id,\n        definition\n      });\n\n      // After animation, add to matched pairs\n      setTimeout(() => {\n        setMatchedPairs(prev => {\n          const newSet = new Set(prev);\n          newSet.add(selectedWord.id);\n          return newSet;\n        });\n        setAnimatingMatch(null);\n      }, 1200); // Animation duration\n    }\n    onAnswer(isCorrect);\n    setSelectedWord(null);\n    setSelectedDefinition(null);\n  };\n\n  // Filter out matched words and definitions\n  const availableWords = words.filter(word => !matchedPairs.has(word.id));\n  const availableDefinitions = shuffledDefinitions.filter(definition => {\n    // Find the word that has this definition\n    const wordWithDefinition = words.find(word => word.definition === definition);\n    return wordWithDefinition && !matchedPairs.has(wordWithDefinition.id);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"match-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-list\",\n      children: [availableWords.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `word-item ${(selectedWord === null || selectedWord === void 0 ? void 0 : selectedWord.id) === word.id ? \"selected\" : \"\"} ${(animatingMatch === null || animatingMatch === void 0 ? void 0 : animatingMatch.wordId) === word.id ? \"connecting\" : \"\"}`,\n        onClick: () => handleWordClick(word),\n        children: word.word\n      }, word.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)), availableWords.length === 0 && !animatingMatch && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"completion-message\",\n        children: \"\\uD83C\\uDF89 All words matched! Great job!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"definition-list\",\n      children: [availableDefinitions.map((definition, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `definition-item ${selectedDefinition === definition ? \"selected\" : \"\"} ${(animatingMatch === null || animatingMatch === void 0 ? void 0 : animatingMatch.definition) === definition ? \"connecting\" : \"\"}`,\n        onClick: () => handleDefinitionClick(definition),\n        children: definition\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)), availableDefinitions.length === 0 && !animatingMatch && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"completion-message\",\n        children: \"\\uD83C\\uDF89 All definitions matched! Excellent work!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(DefinitionMatch, \"i5M1scfX4gokkNaqBBpUggMt4gU=\");\n_c = DefinitionMatch;\nexport default DefinitionMatch;\nvar _c;\n$RefreshReg$(_c, \"DefinitionMatch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DefinitionMatch","words","onAnswer","_s","selectedWord","setSelectedWord","selectedDefinition","setSelectedDefinition","matchedPairs","setMatchedPairs","Set","shuffledDefinitions","setShuffledDefinitions","animatingMatch","setAnimatingMatch","definitions","map","word","definition","sort","Math","random","handleWordClick","has","id","handleDefinitionClick","isCorrect","wordId","setTimeout","prev","newSet","add","availableWords","filter","availableDefinitions","wordWithDefinition","find","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","index","_c","$RefreshReg$"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/DefinitionMatch.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface DefinitionMatchProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n}\n\nconst DefinitionMatch: React.FC<DefinitionMatchProps> = ({\n  words,\n  onAnswer,\n}) => {\n  const [selectedWord, setSelectedWord] = useState<Word | null>(null);\n  const [selectedDefinition, setSelectedDefinition] = useState<string | null>(\n    null\n  );\n  const [matchedPairs, setMatchedPairs] = useState<Set<number>>(new Set());\n  const [shuffledDefinitions, setShuffledDefinitions] = useState<string[]>([]);\n  const [animatingMatch, setAnimatingMatch] = useState<{\n    wordId: number;\n    definition: string;\n  } | null>(null);\n\n  useEffect(() => {\n    // Shuffle definitions when component mounts or words change\n    const definitions = words.map((word) => word.definition);\n    setShuffledDefinitions([...definitions].sort(() => Math.random() - 0.5));\n  }, [words]);\n\n  const handleWordClick = (word: Word) => {\n    if (matchedPairs.has(word.id) || animatingMatch) return;\n    setSelectedWord(word);\n    setSelectedDefinition(null); // Clear any selected definition\n  };\n\n  const handleDefinitionClick = (definition: string) => {\n    if (animatingMatch) return; // Prevent clicks during animation\n\n    if (!selectedWord) {\n      // If no word is selected, just select this definition\n      setSelectedDefinition(definition);\n      return;\n    }\n\n    const isCorrect = selectedWord.definition === definition;\n\n    if (isCorrect) {\n      // Start connection animation\n      setAnimatingMatch({ wordId: selectedWord.id, definition });\n\n      // After animation, add to matched pairs\n      setTimeout(() => {\n        setMatchedPairs((prev) => {\n          const newSet = new Set(prev);\n          newSet.add(selectedWord.id);\n          return newSet;\n        });\n        setAnimatingMatch(null);\n      }, 1200); // Animation duration\n    }\n\n    onAnswer(isCorrect);\n    setSelectedWord(null);\n    setSelectedDefinition(null);\n  };\n\n  // Filter out matched words and definitions\n  const availableWords = words.filter((word) => !matchedPairs.has(word.id));\n  const availableDefinitions = shuffledDefinitions.filter((definition) => {\n    // Find the word that has this definition\n    const wordWithDefinition = words.find(\n      (word) => word.definition === definition\n    );\n    return wordWithDefinition && !matchedPairs.has(wordWithDefinition.id);\n  });\n\n  return (\n    <div className=\"match-container\">\n      <div className=\"word-list\">\n        {availableWords.map((word) => (\n          <div\n            key={word.id}\n            className={`word-item ${\n              selectedWord?.id === word.id ? \"selected\" : \"\"\n            } ${animatingMatch?.wordId === word.id ? \"connecting\" : \"\"}`}\n            onClick={() => handleWordClick(word)}\n          >\n            {word.word}\n          </div>\n        ))}\n        {availableWords.length === 0 && !animatingMatch && (\n          <div className=\"completion-message\">\n            ðŸŽ‰ All words matched! Great job!\n          </div>\n        )}\n      </div>\n\n      <div className=\"definition-list\">\n        {availableDefinitions.map((definition, index) => (\n          <div\n            key={index}\n            className={`definition-item ${\n              selectedDefinition === definition ? \"selected\" : \"\"\n            } ${animatingMatch?.definition === definition ? \"connecting\" : \"\"}`}\n            onClick={() => handleDefinitionClick(definition)}\n          >\n            {definition}\n          </div>\n        ))}\n        {availableDefinitions.length === 0 && !animatingMatch && (\n          <div className=\"completion-message\">\n            ðŸŽ‰ All definitions matched! Excellent work!\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DefinitionMatch;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQnD,MAAMC,eAA+C,GAAGA,CAAC;EACvDC,KAAK;EACLC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAc,IAAI,CAAC;EACnE,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAC1D,IACF,CAAC;EACD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAc,IAAIc,GAAG,CAAC,CAAC,CAAC;EACxE,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGhB,QAAQ,CAAW,EAAE,CAAC;EAC5E,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAG1C,IAAI,CAAC;EAEfC,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,WAAW,GAAGd,KAAK,CAACe,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,UAAU,CAAC;IACxDN,sBAAsB,CAAC,CAAC,GAAGG,WAAW,CAAC,CAACI,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;EAC1E,CAAC,EAAE,CAACpB,KAAK,CAAC,CAAC;EAEX,MAAMqB,eAAe,GAAIL,IAAU,IAAK;IACtC,IAAIT,YAAY,CAACe,GAAG,CAACN,IAAI,CAACO,EAAE,CAAC,IAAIX,cAAc,EAAE;IACjDR,eAAe,CAACY,IAAI,CAAC;IACrBV,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMkB,qBAAqB,GAAIP,UAAkB,IAAK;IACpD,IAAIL,cAAc,EAAE,OAAO,CAAC;;IAE5B,IAAI,CAACT,YAAY,EAAE;MACjB;MACAG,qBAAqB,CAACW,UAAU,CAAC;MACjC;IACF;IAEA,MAAMQ,SAAS,GAAGtB,YAAY,CAACc,UAAU,KAAKA,UAAU;IAExD,IAAIQ,SAAS,EAAE;MACb;MACAZ,iBAAiB,CAAC;QAAEa,MAAM,EAAEvB,YAAY,CAACoB,EAAE;QAAEN;MAAW,CAAC,CAAC;;MAE1D;MACAU,UAAU,CAAC,MAAM;QACfnB,eAAe,CAAEoB,IAAI,IAAK;UACxB,MAAMC,MAAM,GAAG,IAAIpB,GAAG,CAACmB,IAAI,CAAC;UAC5BC,MAAM,CAACC,GAAG,CAAC3B,YAAY,CAACoB,EAAE,CAAC;UAC3B,OAAOM,MAAM;QACf,CAAC,CAAC;QACFhB,iBAAiB,CAAC,IAAI,CAAC;MACzB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ;IAEAZ,QAAQ,CAACwB,SAAS,CAAC;IACnBrB,eAAe,CAAC,IAAI,CAAC;IACrBE,qBAAqB,CAAC,IAAI,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMyB,cAAc,GAAG/B,KAAK,CAACgC,MAAM,CAAEhB,IAAI,IAAK,CAACT,YAAY,CAACe,GAAG,CAACN,IAAI,CAACO,EAAE,CAAC,CAAC;EACzE,MAAMU,oBAAoB,GAAGvB,mBAAmB,CAACsB,MAAM,CAAEf,UAAU,IAAK;IACtE;IACA,MAAMiB,kBAAkB,GAAGlC,KAAK,CAACmC,IAAI,CAClCnB,IAAI,IAAKA,IAAI,CAACC,UAAU,KAAKA,UAChC,CAAC;IACD,OAAOiB,kBAAkB,IAAI,CAAC3B,YAAY,CAACe,GAAG,CAACY,kBAAkB,CAACX,EAAE,CAAC;EACvE,CAAC,CAAC;EAEF,oBACEzB,OAAA;IAAKsC,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BvC,OAAA;MAAKsC,SAAS,EAAC,WAAW;MAAAC,QAAA,GACvBN,cAAc,CAAChB,GAAG,CAAEC,IAAI,iBACvBlB,OAAA;QAEEsC,SAAS,EAAE,aACT,CAAAjC,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEoB,EAAE,MAAKP,IAAI,CAACO,EAAE,GAAG,UAAU,GAAG,EAAE,IAC5C,CAAAX,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEc,MAAM,MAAKV,IAAI,CAACO,EAAE,GAAG,YAAY,GAAG,EAAE,EAAG;QAC7De,OAAO,EAAEA,CAAA,KAAMjB,eAAe,CAACL,IAAI,CAAE;QAAAqB,QAAA,EAEpCrB,IAAI,CAACA;MAAI,GANLA,IAAI,CAACO,EAAE;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOT,CACN,CAAC,EACDX,cAAc,CAACY,MAAM,KAAK,CAAC,IAAI,CAAC/B,cAAc,iBAC7Cd,OAAA;QAAKsC,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAEpC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEN5C,OAAA;MAAKsC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,GAC7BJ,oBAAoB,CAAClB,GAAG,CAAC,CAACE,UAAU,EAAE2B,KAAK,kBAC1C9C,OAAA;QAEEsC,SAAS,EAAE,mBACT/B,kBAAkB,KAAKY,UAAU,GAAG,UAAU,GAAG,EAAE,IACjD,CAAAL,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEK,UAAU,MAAKA,UAAU,GAAG,YAAY,GAAG,EAAE,EAAG;QACpEqB,OAAO,EAAEA,CAAA,KAAMd,qBAAqB,CAACP,UAAU,CAAE;QAAAoB,QAAA,EAEhDpB;MAAU,GANN2B,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOP,CACN,CAAC,EACDT,oBAAoB,CAACU,MAAM,KAAK,CAAC,IAAI,CAAC/B,cAAc,iBACnDd,OAAA;QAAKsC,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAEpC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxC,EAAA,CA7GIH,eAA+C;AAAA8C,EAAA,GAA/C9C,eAA+C;AA+GrD,eAAeA,eAAe;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}