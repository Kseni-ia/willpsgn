{"ast":null,"code":"var _jsxFileName = \"/Users/kseniia/Desktop/WillPsGn/src/components/MemoryGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoryGame = ({\n  words,\n  onAnswer\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n\n  // Timer effect\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameCompleted) {\n      interval = setInterval(() => {\n        setTimeElapsed(prev => prev + 1);\n      }, 1000);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [gameStarted, gameCompleted]);\n\n  // Check if game is completed\n  useEffect(() => {\n    if (cards.length > 0 && cards.every(card => card.isMatched)) {\n      setGameCompleted(true);\n    }\n  }, [cards]);\n  useEffect(() => {\n    // Create cards from words and their synonyms\n    const newCards = [];\n    words.forEach(word => {\n      // Add the vocabulary word\n      newCards.push({\n        id: word.id,\n        content: word.word,\n        type: \"word\",\n        isFlipped: false,\n        isMatched: false\n      });\n\n      // Add a random synonym for each word\n      const randomSynonym = word.synonyms[Math.floor(Math.random() * word.synonyms.length)];\n      newCards.push({\n        id: word.id,\n        content: randomSynonym,\n        type: \"synonym\",\n        isFlipped: false,\n        isMatched: false\n      });\n    });\n\n    // Shuffle the cards\n    setCards(newCards.sort(() => Math.random() - 0.5));\n\n    // Reset game state\n    setTimeElapsed(0);\n    setGameStarted(false);\n    setGameCompleted(false);\n    setFlippedCards([]);\n  }, [words]);\n  const handleCardClick = index => {\n    // Start the game on first click\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n    if (flippedCards.length === 2 || cards[index].isMatched || flippedCards.includes(index)) {\n      return;\n    }\n    const newFlippedCards = [...flippedCards, index];\n    setFlippedCards(newFlippedCards);\n\n    // Update card flip state\n    setCards(prevCards => {\n      const newCards = [...prevCards];\n      newCards[index] = {\n        ...newCards[index],\n        isFlipped: true\n      };\n      return newCards;\n    });\n\n    // Check for match if two cards are flipped\n    if (newFlippedCards.length === 2) {\n      const [firstIndex, secondIndex] = newFlippedCards;\n      const firstCard = cards[firstIndex];\n      const secondCard = cards[secondIndex];\n      setTimeout(() => {\n        if (firstCard.id === secondCard.id) {\n          // Match found - keep cards flipped and mark as matched\n          onAnswer(true);\n          setCards(prevCards => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = {\n              ...newCards[firstIndex],\n              isMatched: true,\n              isFlipped: true\n            };\n            newCards[secondIndex] = {\n              ...newCards[secondIndex],\n              isMatched: true,\n              isFlipped: true\n            };\n            return newCards;\n          });\n        } else {\n          // No match - flip cards back\n          onAnswer(false);\n          setCards(prevCards => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = {\n              ...newCards[firstIndex],\n              isFlipped: false\n            };\n            newCards[secondIndex] = {\n              ...newCards[secondIndex],\n              isFlipped: false\n            };\n            return newCards;\n          });\n        }\n        setFlippedCards([]);\n      }, 800);\n    }\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`;\n  };\n  const restartGame = () => {\n    // Shuffle cards again\n    setCards(prevCards => {\n      const resetCards = prevCards.map(card => ({\n        ...card,\n        isFlipped: false,\n        isMatched: false\n      }));\n      return resetCards.sort(() => Math.random() - 0.5);\n    });\n    setTimeElapsed(0);\n    setGameStarted(false);\n    setGameCompleted(false);\n    setFlippedCards([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memory-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [gameCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-completed\",\n        children: [\"\\uD83C\\uDF89 Game Completed! Great job matching all pairs!\", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"restart-btn\",\n          onClick: restartGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), !gameStarted && !gameCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-instruction\",\n        children: \"Click any card to start!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-grid\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card ${card.isFlipped ? \"flipped\" : \"\"} ${card.isMatched ? \"matched\" : \"\"} ${card.type === \"word\" ? \"word-card\" : \"synonym-card\"}`,\n        onClick: () => handleCardClick(index),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-inner\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-front\",\n            children: \"?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-back\",\n            children: card.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)\n      }, `${card.type}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"BBj0LueeQ2Ckx43rqJ2+pN1/+8Y=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MemoryGame","words","onAnswer","_s","cards","setCards","flippedCards","setFlippedCards","gameStarted","setGameStarted","gameCompleted","setGameCompleted","interval","setInterval","setTimeElapsed","prev","clearInterval","length","every","card","isMatched","newCards","forEach","word","push","id","content","type","isFlipped","randomSynonym","synonyms","Math","floor","random","sort","handleCardClick","index","includes","newFlippedCards","prevCards","firstIndex","secondIndex","firstCard","secondCard","setTimeout","formatTime","seconds","mins","secs","toString","padStart","restartGame","resetCards","map","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/MemoryGame.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface MemoryGameProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n}\n\ninterface Card {\n  id: number;\n  content: string;\n  type: \"word\" | \"synonym\";\n  isFlipped: boolean;\n  isMatched: boolean;\n}\n\nconst MemoryGame: React.FC<MemoryGameProps> = ({ words, onAnswer }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n\n  // Timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (gameStarted && !gameCompleted) {\n      interval = setInterval(() => {\n        setTimeElapsed((prev) => prev + 1);\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [gameStarted, gameCompleted]);\n\n  // Check if game is completed\n  useEffect(() => {\n    if (cards.length > 0 && cards.every((card) => card.isMatched)) {\n      setGameCompleted(true);\n    }\n  }, [cards]);\n\n  useEffect(() => {\n    // Create cards from words and their synonyms\n    const newCards: Card[] = [];\n\n    words.forEach((word) => {\n      // Add the vocabulary word\n      newCards.push({\n        id: word.id,\n        content: word.word,\n        type: \"word\",\n        isFlipped: false,\n        isMatched: false,\n      });\n\n      // Add a random synonym for each word\n      const randomSynonym =\n        word.synonyms[Math.floor(Math.random() * word.synonyms.length)];\n      newCards.push({\n        id: word.id,\n        content: randomSynonym,\n        type: \"synonym\",\n        isFlipped: false,\n        isMatched: false,\n      });\n    });\n\n    // Shuffle the cards\n    setCards(newCards.sort(() => Math.random() - 0.5));\n\n    // Reset game state\n    setTimeElapsed(0);\n    setGameStarted(false);\n    setGameCompleted(false);\n    setFlippedCards([]);\n  }, [words]);\n\n  const handleCardClick = (index: number) => {\n    // Start the game on first click\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n\n    if (\n      flippedCards.length === 2 ||\n      cards[index].isMatched ||\n      flippedCards.includes(index)\n    ) {\n      return;\n    }\n\n    const newFlippedCards = [...flippedCards, index];\n    setFlippedCards(newFlippedCards);\n\n    // Update card flip state\n    setCards((prevCards) => {\n      const newCards = [...prevCards];\n      newCards[index] = { ...newCards[index], isFlipped: true };\n      return newCards;\n    });\n\n    // Check for match if two cards are flipped\n    if (newFlippedCards.length === 2) {\n      const [firstIndex, secondIndex] = newFlippedCards;\n      const firstCard = cards[firstIndex];\n      const secondCard = cards[secondIndex];\n\n      setTimeout(() => {\n        if (firstCard.id === secondCard.id) {\n          // Match found - keep cards flipped and mark as matched\n          onAnswer(true);\n\n          setCards((prevCards) => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = {\n              ...newCards[firstIndex],\n              isMatched: true,\n              isFlipped: true,\n            };\n            newCards[secondIndex] = {\n              ...newCards[secondIndex],\n              isMatched: true,\n              isFlipped: true,\n            };\n            return newCards;\n          });\n        } else {\n          // No match - flip cards back\n          onAnswer(false);\n          setCards((prevCards) => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = {\n              ...newCards[firstIndex],\n              isFlipped: false,\n            };\n            newCards[secondIndex] = {\n              ...newCards[secondIndex],\n              isFlipped: false,\n            };\n            return newCards;\n          });\n        }\n        setFlippedCards([]);\n      }, 800);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  const restartGame = () => {\n    // Shuffle cards again\n    setCards((prevCards) => {\n      const resetCards = prevCards.map((card) => ({\n        ...card,\n        isFlipped: false,\n        isMatched: false,\n      }));\n      return resetCards.sort(() => Math.random() - 0.5);\n    });\n\n    setTimeElapsed(0);\n    setGameStarted(false);\n    setGameCompleted(false);\n    setFlippedCards([]);\n  };\n\n  return (\n    <div className=\"memory-game\">\n      <div className=\"game-header\">\n        {gameCompleted && (\n          <div className=\"game-completed\">\n            🎉 Game Completed! Great job matching all pairs!\n            <button className=\"restart-btn\" onClick={restartGame}>\n              Play Again\n            </button>\n          </div>\n        )}\n\n        {!gameStarted && !gameCompleted && (\n          <div className=\"game-instruction\">Click any card to start!</div>\n        )}\n      </div>\n\n      <div className=\"cards-grid\">\n        {cards.map((card, index) => (\n          <div\n            key={`${card.type}-${index}`}\n            className={`card ${card.isFlipped ? \"flipped\" : \"\"} ${\n              card.isMatched ? \"matched\" : \"\"\n            } ${card.type === \"word\" ? \"word-card\" : \"synonym-card\"}`}\n            onClick={() => handleCardClick(index)}\n          >\n            <div className=\"card-inner\">\n              <div className=\"card-front\">?</div>\n              <div className=\"card-back\">{card.content}</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}