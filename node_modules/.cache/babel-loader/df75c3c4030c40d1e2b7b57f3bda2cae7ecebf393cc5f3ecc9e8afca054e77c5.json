{"ast":null,"code":"var _jsxFileName = \"/Users/kseniia/Desktop/WillPsGn/src/components/DefinitionMatch.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DefinitionMatch = ({\n  words,\n  onAnswer\n}) => {\n  _s();\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [selectedDefinition, setSelectedDefinition] = useState(null);\n  const [matchedPairs, setMatchedPairs] = useState(new Set());\n  const [shuffledDefinitions, setShuffledDefinitions] = useState([]);\n  useEffect(() => {\n    // Shuffle definitions when component mounts or words change\n    const definitions = words.map(word => word.definition);\n    setShuffledDefinitions([...definitions].sort(() => Math.random() - 0.5));\n  }, [words]);\n  const handleWordClick = word => {\n    if (matchedPairs.has(word.id)) return;\n    setSelectedWord(word);\n    setSelectedDefinition(null); // Clear any selected definition\n  };\n  const handleDefinitionClick = definition => {\n    if (!selectedWord) {\n      // If no word is selected, just select this definition\n      setSelectedDefinition(definition);\n      return;\n    }\n    const isCorrect = selectedWord.definition === definition;\n    if (isCorrect) {\n      // Add to matched pairs so they disappear from the lists\n      setMatchedPairs(prev => {\n        const newSet = new Set(prev);\n        newSet.add(selectedWord.id);\n        return newSet;\n      });\n    }\n    onAnswer(isCorrect);\n    setSelectedWord(null);\n    setSelectedDefinition(null);\n  };\n\n  // Filter out matched words and definitions\n  const availableWords = words.filter(word => !matchedPairs.has(word.id));\n  const availableDefinitions = shuffledDefinitions.filter(definition => {\n    // Find the word that has this definition\n    const wordWithDefinition = words.find(word => word.definition === definition);\n    return wordWithDefinition && !matchedPairs.has(wordWithDefinition.id);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"match-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-list\",\n      children: [availableWords.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `word-item ${(selectedWord === null || selectedWord === void 0 ? void 0 : selectedWord.id) === word.id ? \"selected\" : \"\"}`,\n        onClick: () => handleWordClick(word),\n        children: word.word\n      }, word.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)), availableWords.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"completion-message\",\n        children: \"\\uD83C\\uDF89 All words matched! Great job!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"definition-list\",\n      children: [availableDefinitions.map((definition, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `definition-item ${selectedDefinition === definition ? \"selected\" : \"\"}`,\n        onClick: () => handleDefinitionClick(definition),\n        children: definition\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)), availableDefinitions.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"completion-message\",\n        children: \"\\uD83C\\uDF89 All definitions matched! Excellent work!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(DefinitionMatch, \"T6SWn3wGQzj9LsgcFY1MZkxCksc=\");\n_c = DefinitionMatch;\nexport default DefinitionMatch;\nvar _c;\n$RefreshReg$(_c, \"DefinitionMatch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DefinitionMatch","words","onAnswer","_s","selectedWord","setSelectedWord","selectedDefinition","setSelectedDefinition","matchedPairs","setMatchedPairs","Set","shuffledDefinitions","setShuffledDefinitions","definitions","map","word","definition","sort","Math","random","handleWordClick","has","id","handleDefinitionClick","isCorrect","prev","newSet","add","availableWords","filter","availableDefinitions","wordWithDefinition","find","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","index","_c","$RefreshReg$"],"sources":["/Users/kseniia/Desktop/WillPsGn/src/components/DefinitionMatch.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Word } from \"../types/game\";\n\ninterface DefinitionMatchProps {\n  words: Word[];\n  onAnswer: (isCorrect: boolean) => void;\n}\n\nconst DefinitionMatch: React.FC<DefinitionMatchProps> = ({\n  words,\n  onAnswer,\n}) => {\n  const [selectedWord, setSelectedWord] = useState<Word | null>(null);\n  const [selectedDefinition, setSelectedDefinition] = useState<string | null>(\n    null\n  );\n  const [matchedPairs, setMatchedPairs] = useState<Set<number>>(new Set());\n  const [shuffledDefinitions, setShuffledDefinitions] = useState<string[]>([]);\n\n  useEffect(() => {\n    // Shuffle definitions when component mounts or words change\n    const definitions = words.map((word) => word.definition);\n    setShuffledDefinitions([...definitions].sort(() => Math.random() - 0.5));\n  }, [words]);\n\n  const handleWordClick = (word: Word) => {\n    if (matchedPairs.has(word.id)) return;\n    setSelectedWord(word);\n    setSelectedDefinition(null); // Clear any selected definition\n  };\n\n  const handleDefinitionClick = (definition: string) => {\n    if (!selectedWord) {\n      // If no word is selected, just select this definition\n      setSelectedDefinition(definition);\n      return;\n    }\n\n    const isCorrect = selectedWord.definition === definition;\n\n    if (isCorrect) {\n      // Add to matched pairs so they disappear from the lists\n      setMatchedPairs((prev) => {\n        const newSet = new Set(prev);\n        newSet.add(selectedWord.id);\n        return newSet;\n      });\n    }\n\n    onAnswer(isCorrect);\n    setSelectedWord(null);\n    setSelectedDefinition(null);\n  };\n\n  // Filter out matched words and definitions\n  const availableWords = words.filter((word) => !matchedPairs.has(word.id));\n  const availableDefinitions = shuffledDefinitions.filter((definition) => {\n    // Find the word that has this definition\n    const wordWithDefinition = words.find(\n      (word) => word.definition === definition\n    );\n    return wordWithDefinition && !matchedPairs.has(wordWithDefinition.id);\n  });\n\n  return (\n    <div className=\"match-container\">\n      <div className=\"word-list\">\n        {availableWords.map((word) => (\n          <div\n            key={word.id}\n            className={`word-item ${\n              selectedWord?.id === word.id ? \"selected\" : \"\"\n            }`}\n            onClick={() => handleWordClick(word)}\n          >\n            {word.word}\n          </div>\n        ))}\n        {availableWords.length === 0 && (\n          <div className=\"completion-message\">\n            ðŸŽ‰ All words matched! Great job!\n          </div>\n        )}\n      </div>\n\n      <div className=\"definition-list\">\n        {availableDefinitions.map((definition, index) => (\n          <div\n            key={index}\n            className={`definition-item ${\n              selectedDefinition === definition ? \"selected\" : \"\"\n            }`}\n            onClick={() => handleDefinitionClick(definition)}\n          >\n            {definition}\n          </div>\n        ))}\n        {availableDefinitions.length === 0 && (\n          <div className=\"completion-message\">\n            ðŸŽ‰ All definitions matched! Excellent work!\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DefinitionMatch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}